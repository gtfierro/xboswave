// Code generated by protoc-gen-go. DO NOT EDIT.
// source: parker.proto

package xbospb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ParkerState struct {
	//unit: hours
	CompressorWorkingHours *Double `protobuf:"bytes,1,opt,name=compressor_working_hours,json=compressorWorkingHours,proto3" json:"compressor_working_hours,omitempty"`
	//on/standby
	OnStandbyStatus *Int64 `protobuf:"bytes,2,opt,name=on_standby_status,json=onStandbyStatus,proto3" json:"on_standby_status,omitempty"`
	LightStatus     *Int64 `protobuf:"bytes,3,opt,name=light_status,json=lightStatus,proto3" json:"light_status,omitempty"`
	AuxOutputStatus *Int64 `protobuf:"bytes,4,opt,name=aux_output_status,json=auxOutputStatus,proto3" json:"aux_output_status,omitempty"`
	//counter reduces periodically (in 1/4 of a minute)
	//unit: seconds
	NextDefrostCounter *Double `protobuf:"bytes,5,opt,name=next_defrost_counter,json=nextDefrostCounter,proto3" json:"next_defrost_counter,omitempty"`
	//digital_io_status & 0x0001
	DoorSwitchInputStatus *Int64 `protobuf:"bytes,6,opt,name=door_switch_input_status,json=doorSwitchInputStatus,proto3" json:"door_switch_input_status,omitempty"`
	//digital_io_status & 0x0002
	MultipurposeInputStatus *Int64 `protobuf:"bytes,7,opt,name=multipurpose_input_status,json=multipurposeInputStatus,proto3" json:"multipurpose_input_status,omitempty"`
	//digital_io_status & 0x0100
	CompressorStatus *Int64 `protobuf:"bytes,8,opt,name=compressor_status,json=compressorStatus,proto3" json:"compressor_status,omitempty"`
	//digital_io_status & 0x0200
	OutputDefrostStatus *Int64 `protobuf:"bytes,9,opt,name=output_defrost_status,json=outputDefrostStatus,proto3" json:"output_defrost_status,omitempty"`
	//digital_io_status & 0x0400
	FansStatus *Int64 `protobuf:"bytes,10,opt,name=fans_status,json=fansStatus,proto3" json:"fans_status,omitempty"`
	//digital_io_status & 0x0800
	OutputK4Status *Int64 `protobuf:"bytes,11,opt,name=output_k4_status,json=outputK4Status,proto3" json:"output_k4_status,omitempty"`
	//temperature measured by cabinet probe (in 10x actual value)
	//unit: C
	CabinetTemperature *Double `protobuf:"bytes,12,opt,name=cabinet_temperature,json=cabinetTemperature,proto3" json:"cabinet_temperature,omitempty"`
	//temperature measured by evaporator probe (in 10x actual value)
	//unit: C
	EvaporatorTemperature *Double `protobuf:"bytes,13,opt,name=evaporator_temperature,json=evaporatorTemperature,proto3" json:"evaporator_temperature,omitempty"`
	//temperature measured by auxiliary probe (if present) (in 10x actual value)
	//unit: C
	AuxiliaryTemperature *Double `protobuf:"bytes,14,opt,name=auxiliary_temperature,json=auxiliaryTemperature,proto3" json:"auxiliary_temperature,omitempty"`
	//alarm_status & 0x0100
	Probe1FailureAlarm *Int64 `protobuf:"bytes,15,opt,name=probe1_failure_alarm,json=probe1FailureAlarm,proto3" json:"probe1_failure_alarm,omitempty"`
	//alarm_status & 0x0200
	Probe2FailureAlarm *Int64 `protobuf:"bytes,16,opt,name=probe2_failure_alarm,json=probe2FailureAlarm,proto3" json:"probe2_failure_alarm,omitempty"`
	//alarm_status & 0x0400
	Probe3FailureAlarm *Int64 `protobuf:"bytes,17,opt,name=probe3_failure_alarm,json=probe3FailureAlarm,proto3" json:"probe3_failure_alarm,omitempty"`
	//alarm_status & 0x1000
	MinimumTemperatureAlarm *Int64 `protobuf:"bytes,18,opt,name=minimum_temperature_alarm,json=minimumTemperatureAlarm,proto3" json:"minimum_temperature_alarm,omitempty"`
	//alarm_status & 0x2000
	MaximumTempertureAlarm *Int64 `protobuf:"bytes,19,opt,name=maximum_temperture_alarm,json=maximumTempertureAlarm,proto3" json:"maximum_temperture_alarm,omitempty"`
	//alarm_status & 0x4000
	CondensorTemperatureFailureAlarm *Int64 `protobuf:"bytes,20,opt,name=condensor_temperature_failure_alarm,json=condensorTemperatureFailureAlarm,proto3" json:"condensor_temperature_failure_alarm,omitempty"`
	//alarm_status & 0x8000
	CondensorPreAlarm *Int64 `protobuf:"bytes,21,opt,name=condensor_pre_alarm,json=condensorPreAlarm,proto3" json:"condensor_pre_alarm,omitempty"`
	//alarm_status & 0x0004
	DoorAlarm *Int64 `protobuf:"bytes,22,opt,name=door_alarm,json=doorAlarm,proto3" json:"door_alarm,omitempty"`
	//alarm_status & 0x0008
	MultipurposeInputAlarm *Int64 `protobuf:"bytes,23,opt,name=multipurpose_input_alarm,json=multipurposeInputAlarm,proto3" json:"multipurpose_input_alarm,omitempty"`
	//alarm_status & 0x0010
	CompressorBlockedAlarm *Int64 `protobuf:"bytes,24,opt,name=compressor_blocked_alarm,json=compressorBlockedAlarm,proto3" json:"compressor_blocked_alarm,omitempty"`
	//alarm_status & 0x0020
	PowerFailureAlarm *Int64 `protobuf:"bytes,25,opt,name=power_failure_alarm,json=powerFailureAlarm,proto3" json:"power_failure_alarm,omitempty"`
	//alarm_status & 0x0080
	RtcErrorAlarm *Int64 `protobuf:"bytes,26,opt,name=rtc_error_alarm,json=rtcErrorAlarm,proto3" json:"rtc_error_alarm,omitempty"`
	//regulator_flag_1 & 0x0100
	EnergySavingRegulatorFlag *Int64 `protobuf:"bytes,27,opt,name=energy_saving_regulator_flag,json=energySavingRegulatorFlag,proto3" json:"energy_saving_regulator_flag,omitempty"`
	//regulator_flag_1 & 0x0200
	EnergySavingRealTimeRegulatorFlag *Int64 `protobuf:"bytes,28,opt,name=energy_saving_real_time_regulator_flag,json=energySavingRealTimeRegulatorFlag,proto3" json:"energy_saving_real_time_regulator_flag,omitempty"`
	//regulator_flag_1 & 0x0400
	ServiceRequestRegulatorFlag *Int64 `protobuf:"bytes,29,opt,name=service_request_regulator_flag,json=serviceRequestRegulatorFlag,proto3" json:"service_request_regulator_flag,omitempty"`
	//regulator_flag_2 & 0x0001; 1=standby
	OnStandbyRegulatorFlag *Int64 `protobuf:"bytes,30,opt,name=on_standby_regulator_flag,json=onStandbyRegulatorFlag,proto3" json:"on_standby_regulator_flag,omitempty"`
	//regulator_flag_2 & 0x0080
	NewAlarmToReadRegulatorFlag *Int64 `protobuf:"bytes,31,opt,name=new_alarm_to_read_regulator_flag,json=newAlarmToReadRegulatorFlag,proto3" json:"new_alarm_to_read_regulator_flag,omitempty"`
	//regulator_flag_2 & 0x0700; 0/1/2/3 = no defrost active/defrost running/dripping/fans stop
	DefrostStatusRegulatorFlag *Int64 `protobuf:"bytes,32,opt,name=defrost_status_regulator_flag,json=defrostStatusRegulatorFlag,proto3" json:"defrost_status_regulator_flag,omitempty"`
	//active_setpoint=setpoint(when no energy saving); else=setpoint+r4
	//unit: C
	ActiveSetpoint *Double `protobuf:"bytes,33,opt,name=active_setpoint,json=activeSetpoint,proto3" json:"active_setpoint,omitempty"`
	//time remaining to next defrost
	//unit: seconds
	TimeUntilDefrost *Double `protobuf:"bytes,34,opt,name=time_until_defrost,json=timeUntilDefrost,proto3" json:"time_until_defrost,omitempty"`
	//current defrost counter countdown (in 1/4 of a minute)
	//unit: seconds
	CurrentDefrostCounter *Int64 `protobuf:"bytes,35,opt,name=current_defrost_counter,json=currentDefrostCounter,proto3" json:"current_defrost_counter,omitempty"`
	//compressor delay in seconds
	//unit: seconds
	CompressorDelay *Int64 `protobuf:"bytes,36,opt,name=compressor_delay,json=compressorDelay,proto3" json:"compressor_delay,omitempty"`
	//number of HACCP alarms in history (max of last 9 stored)
	NumAlarmsInHistory *Int64 `protobuf:"bytes,37,opt,name=num_alarms_in_history,json=numAlarmsInHistory,proto3" json:"num_alarms_in_history,omitempty"`
	//is energy saving mode active or not; digital_output_flags & 0x0100
	EnergySavingStatus *Int64 `protobuf:"bytes,38,opt,name=energy_saving_status,json=energySavingStatus,proto3" json:"energy_saving_status,omitempty"`
	//digital_output_flags & 0x0200
	ServiceRequestStatus *Int64 `protobuf:"bytes,39,opt,name=service_request_status,json=serviceRequestStatus,proto3" json:"service_request_status,omitempty"`
	//digital_output_flags & 0x001
	ResistorsActivatedByAuxKeyStatus *Int64 `protobuf:"bytes,40,opt,name=resistors_activated_by_aux_key_status,json=resistorsActivatedByAuxKeyStatus,proto3" json:"resistors_activated_by_aux_key_status,omitempty"`
	//digital_output_flags & 0x002
	EvaporatorValveState *Int64 `protobuf:"bytes,41,opt,name=evaporator_valve_state,json=evaporatorValveState,proto3" json:"evaporator_valve_state,omitempty"`
	//digital_output_flags & 0x004
	OutputDefrostState *Int64 `protobuf:"bytes,42,opt,name=output_defrost_state,json=outputDefrostState,proto3" json:"output_defrost_state,omitempty"`
	//digital_output_flags & 0x008
	OutputLuxState *Int64 `protobuf:"bytes,43,opt,name=output_lux_state,json=outputLuxState,proto3" json:"output_lux_state,omitempty"`
	//digital_output_flags & 0x0010
	OutputAuxState *Int64 `protobuf:"bytes,44,opt,name=output_aux_state,json=outputAuxState,proto3" json:"output_aux_state,omitempty"`
	//activated by cabinet probe; digital_output_flags & 0x0020
	ResistorsState *Int64 `protobuf:"bytes,45,opt,name=resistors_state,json=resistorsState,proto3" json:"resistors_state,omitempty"`
	//digital_output_flags & 0x0040
	OutputAlarmState *Int64 `protobuf:"bytes,46,opt,name=output_alarm_state,json=outputAlarmState,proto3" json:"output_alarm_state,omitempty"`
	//digital_output_flags & 0x0080
	SecondCompressorState *Int64 `protobuf:"bytes,47,opt,name=second_compressor_state,json=secondCompressorState,proto3" json:"second_compressor_state,omitempty"`
	//setpoint
	Setpoint *Double `protobuf:"bytes,48,opt,name=setpoint,proto3" json:"setpoint,omitempty"`
	//min working setpoint
	//unit: C
	R1 *Double `protobuf:"bytes,49,opt,name=r1,proto3" json:"r1,omitempty"`
	//max working setpoint
	//unit: C
	R2 *Double `protobuf:"bytes,50,opt,name=r2,proto3" json:"r2,omitempty"`
	//used for active_set_point calculation in energy saving mode; adds to active setpoint
	R4 *Double `protobuf:"bytes,51,opt,name=r4,proto3" json:"r4,omitempty"`
	//compressor delay after turning on controller
	//unit: minutes
	C0 *Double `protobuf:"bytes,52,opt,name=C0,proto3" json:"C0,omitempty"`
	//min time between 2 activations in succession of compressor
	//unit: minutes
	C1 *Double `protobuf:"bytes,53,opt,name=C1,proto3" json:"C1,omitempty"`
	//defrost interval (only if d8 = 0/1/2); 0 = the defrost at intervals will never be activated
	//unit: hours
	D0 *Double `protobuf:"bytes,54,opt,name=d0,proto3" json:"d0,omitempty"`
	//defrost duration if P3=0 or 2; max duration if P3=1
	//unit: minutes
	D3 *Double `protobuf:"bytes,55,opt,name=d3,proto3" json:"d3,omitempty"`
	//defrost delay when you turn on controller; only if d4=1
	//unit: minutes
	D5 *Double `protobuf:"bytes,56,opt,name=d5,proto3" json:"d5,omitempty"`
	//drip delay
	//unit: minutes
	D7 *Double `protobuf:"bytes,57,opt,name=d7,proto3" json:"d7,omitempty"`
	//kind of defrost interval; 0/1/2/3=defrost on when controller/compressor/evaporator temperature is below d9  is on for d0 hours/realtime
	D8 *Int64 `protobuf:"bytes,58,opt,name=d8,proto3" json:"d8,omitempty"`
	//measured input for low temp alarm; 0/1/2=cab/evap/aux (only if P4=1/2)
	A0 *Int64 `protobuf:"bytes,59,opt,name=A0,proto3" json:"A0,omitempty"`
	//temperature below which low temperature alarm is activated
	//unit: C
	A1 *Double `protobuf:"bytes,60,opt,name=A1,proto3" json:"A1,omitempty"`
	//kind of lower temp alarm; 0/1/2=disabled/working setpoint-A1/absolute (or A1)
	A2 *Int64 `protobuf:"bytes,61,opt,name=A2,proto3" json:"A2,omitempty"`
	//measured input for high temp alarm; 0/1/2=cab/evap/aux (only if P4=1/2)
	A3 *Int64 `protobuf:"bytes,62,opt,name=A3,proto3" json:"A3,omitempty"`
	//temperature above which high temperature alarm is activated
	//unit: C
	A4 *Double `protobuf:"bytes,63,opt,name=A4,proto3" json:"A4,omitempty"`
	//kind of high temp alarm; 0/1/2=disabled/working setpoint+A4/absolute (or A4)
	A5 *Int64 `protobuf:"bytes,64,opt,name=A5,proto3" json:"A5,omitempty"`
	//high temperature alarm delay after turning on controller; only if A3=0
	//unit: minutes
	A6 *Double `protobuf:"bytes,65,opt,name=A6,proto3" json:"A6,omitempty"`
	//temperature alarm delay
	//unit: minutes
	A7 *Double `protobuf:"bytes,66,opt,name=A7,proto3" json:"A7,omitempty"`
	//high temperature alarm delay after end of defrost; only if A3=0
	//unit: minutes
	A8 *Double `protobuf:"bytes,67,opt,name=A8,proto3" json:"A8,omitempty"`
	//high temperature alarm delay after deactivation of microport input only if A3=0
	//unit: minutes
	A9 *Double `protobuf:"bytes,68,opt,name=A9,proto3" json:"A9,omitempty"`
	//evap fan activity during normal operation; 0/1/2/3/4=off/on/in parallel with compressor/dependent on F1/off if compressor is off and depedent on F1 if compressor is on
	F0 *Int64 `protobuf:"bytes,69,opt,name=F0,proto3" json:"F0,omitempty"`
	//evap temperature above which evap fan is turned off; only if F0=3/4
	//unit: C
	F1 *Double `protobuf:"bytes,70,opt,name=F1,proto3" json:"F1,omitempty"`
	//evap fan activity during defrost and drip delay; 0/1/2 = off/on/dependent on F0
	F2 *Int64 `protobuf:"bytes,71,opt,name=F2,proto3" json:"F2,omitempty"`
	//fan delay after evap drip completes
	//unit: minutes
	F3 *Double `protobuf:"bytes,72,opt,name=F3,proto3" json:"F3,omitempty"`
	//first real time defrost activation time; only if d8=3
	//unit: hh:mm
	Hd1 *Double `protobuf:"bytes,73,opt,name=Hd1,proto3" json:"Hd1,omitempty"`
	//second real time defrost activation time; only if d8=3
	//unit: hh:mm
	Hd2 *Double `protobuf:"bytes,74,opt,name=Hd2,proto3" json:"Hd2,omitempty"`
	//third real time defrost activation time; only if d8=3
	//unit: hh:mm
	Hd3 *Double `protobuf:"bytes,75,opt,name=Hd3,proto3" json:"Hd3,omitempty"`
	//fourth real time defrost activation time; only if d8=3
	//unit: hh:mm
	Hd4 *Double `protobuf:"bytes,76,opt,name=Hd4,proto3" json:"Hd4,omitempty"`
	//fifth real time defrost activation time; only if d8=3
	//unit: hh:mm
	Hd5 *Double `protobuf:"bytes,77,opt,name=Hd5,proto3" json:"Hd5,omitempty"`
	//sixth real time defrost activation time; only if d8=3
	//unit: hh:mm
	Hd6 *Double `protobuf:"bytes,78,opt,name=Hd6,proto3" json:"Hd6,omitempty"`
	// current UNIX epoch time
	//unit:ns
	Time                 uint64   `protobuf:"varint,79,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParkerState) Reset()         { *m = ParkerState{} }
func (m *ParkerState) String() string { return proto.CompactTextString(m) }
func (*ParkerState) ProtoMessage()    {}
func (*ParkerState) Descriptor() ([]byte, []int) {
	return fileDescriptor_48357db32399db41, []int{0}
}

func (m *ParkerState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParkerState.Unmarshal(m, b)
}
func (m *ParkerState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParkerState.Marshal(b, m, deterministic)
}
func (m *ParkerState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParkerState.Merge(m, src)
}
func (m *ParkerState) XXX_Size() int {
	return xxx_messageInfo_ParkerState.Size(m)
}
func (m *ParkerState) XXX_DiscardUnknown() {
	xxx_messageInfo_ParkerState.DiscardUnknown(m)
}

var xxx_messageInfo_ParkerState proto.InternalMessageInfo

func (m *ParkerState) GetCompressorWorkingHours() *Double {
	if m != nil {
		return m.CompressorWorkingHours
	}
	return nil
}

func (m *ParkerState) GetOnStandbyStatus() *Int64 {
	if m != nil {
		return m.OnStandbyStatus
	}
	return nil
}

func (m *ParkerState) GetLightStatus() *Int64 {
	if m != nil {
		return m.LightStatus
	}
	return nil
}

func (m *ParkerState) GetAuxOutputStatus() *Int64 {
	if m != nil {
		return m.AuxOutputStatus
	}
	return nil
}

func (m *ParkerState) GetNextDefrostCounter() *Double {
	if m != nil {
		return m.NextDefrostCounter
	}
	return nil
}

func (m *ParkerState) GetDoorSwitchInputStatus() *Int64 {
	if m != nil {
		return m.DoorSwitchInputStatus
	}
	return nil
}

func (m *ParkerState) GetMultipurposeInputStatus() *Int64 {
	if m != nil {
		return m.MultipurposeInputStatus
	}
	return nil
}

func (m *ParkerState) GetCompressorStatus() *Int64 {
	if m != nil {
		return m.CompressorStatus
	}
	return nil
}

func (m *ParkerState) GetOutputDefrostStatus() *Int64 {
	if m != nil {
		return m.OutputDefrostStatus
	}
	return nil
}

func (m *ParkerState) GetFansStatus() *Int64 {
	if m != nil {
		return m.FansStatus
	}
	return nil
}

func (m *ParkerState) GetOutputK4Status() *Int64 {
	if m != nil {
		return m.OutputK4Status
	}
	return nil
}

func (m *ParkerState) GetCabinetTemperature() *Double {
	if m != nil {
		return m.CabinetTemperature
	}
	return nil
}

func (m *ParkerState) GetEvaporatorTemperature() *Double {
	if m != nil {
		return m.EvaporatorTemperature
	}
	return nil
}

func (m *ParkerState) GetAuxiliaryTemperature() *Double {
	if m != nil {
		return m.AuxiliaryTemperature
	}
	return nil
}

func (m *ParkerState) GetProbe1FailureAlarm() *Int64 {
	if m != nil {
		return m.Probe1FailureAlarm
	}
	return nil
}

func (m *ParkerState) GetProbe2FailureAlarm() *Int64 {
	if m != nil {
		return m.Probe2FailureAlarm
	}
	return nil
}

func (m *ParkerState) GetProbe3FailureAlarm() *Int64 {
	if m != nil {
		return m.Probe3FailureAlarm
	}
	return nil
}

func (m *ParkerState) GetMinimumTemperatureAlarm() *Int64 {
	if m != nil {
		return m.MinimumTemperatureAlarm
	}
	return nil
}

func (m *ParkerState) GetMaximumTempertureAlarm() *Int64 {
	if m != nil {
		return m.MaximumTempertureAlarm
	}
	return nil
}

func (m *ParkerState) GetCondensorTemperatureFailureAlarm() *Int64 {
	if m != nil {
		return m.CondensorTemperatureFailureAlarm
	}
	return nil
}

func (m *ParkerState) GetCondensorPreAlarm() *Int64 {
	if m != nil {
		return m.CondensorPreAlarm
	}
	return nil
}

func (m *ParkerState) GetDoorAlarm() *Int64 {
	if m != nil {
		return m.DoorAlarm
	}
	return nil
}

func (m *ParkerState) GetMultipurposeInputAlarm() *Int64 {
	if m != nil {
		return m.MultipurposeInputAlarm
	}
	return nil
}

func (m *ParkerState) GetCompressorBlockedAlarm() *Int64 {
	if m != nil {
		return m.CompressorBlockedAlarm
	}
	return nil
}

func (m *ParkerState) GetPowerFailureAlarm() *Int64 {
	if m != nil {
		return m.PowerFailureAlarm
	}
	return nil
}

func (m *ParkerState) GetRtcErrorAlarm() *Int64 {
	if m != nil {
		return m.RtcErrorAlarm
	}
	return nil
}

func (m *ParkerState) GetEnergySavingRegulatorFlag() *Int64 {
	if m != nil {
		return m.EnergySavingRegulatorFlag
	}
	return nil
}

func (m *ParkerState) GetEnergySavingRealTimeRegulatorFlag() *Int64 {
	if m != nil {
		return m.EnergySavingRealTimeRegulatorFlag
	}
	return nil
}

func (m *ParkerState) GetServiceRequestRegulatorFlag() *Int64 {
	if m != nil {
		return m.ServiceRequestRegulatorFlag
	}
	return nil
}

func (m *ParkerState) GetOnStandbyRegulatorFlag() *Int64 {
	if m != nil {
		return m.OnStandbyRegulatorFlag
	}
	return nil
}

func (m *ParkerState) GetNewAlarmToReadRegulatorFlag() *Int64 {
	if m != nil {
		return m.NewAlarmToReadRegulatorFlag
	}
	return nil
}

func (m *ParkerState) GetDefrostStatusRegulatorFlag() *Int64 {
	if m != nil {
		return m.DefrostStatusRegulatorFlag
	}
	return nil
}

func (m *ParkerState) GetActiveSetpoint() *Double {
	if m != nil {
		return m.ActiveSetpoint
	}
	return nil
}

func (m *ParkerState) GetTimeUntilDefrost() *Double {
	if m != nil {
		return m.TimeUntilDefrost
	}
	return nil
}

func (m *ParkerState) GetCurrentDefrostCounter() *Int64 {
	if m != nil {
		return m.CurrentDefrostCounter
	}
	return nil
}

func (m *ParkerState) GetCompressorDelay() *Int64 {
	if m != nil {
		return m.CompressorDelay
	}
	return nil
}

func (m *ParkerState) GetNumAlarmsInHistory() *Int64 {
	if m != nil {
		return m.NumAlarmsInHistory
	}
	return nil
}

func (m *ParkerState) GetEnergySavingStatus() *Int64 {
	if m != nil {
		return m.EnergySavingStatus
	}
	return nil
}

func (m *ParkerState) GetServiceRequestStatus() *Int64 {
	if m != nil {
		return m.ServiceRequestStatus
	}
	return nil
}

func (m *ParkerState) GetResistorsActivatedByAuxKeyStatus() *Int64 {
	if m != nil {
		return m.ResistorsActivatedByAuxKeyStatus
	}
	return nil
}

func (m *ParkerState) GetEvaporatorValveState() *Int64 {
	if m != nil {
		return m.EvaporatorValveState
	}
	return nil
}

func (m *ParkerState) GetOutputDefrostState() *Int64 {
	if m != nil {
		return m.OutputDefrostState
	}
	return nil
}

func (m *ParkerState) GetOutputLuxState() *Int64 {
	if m != nil {
		return m.OutputLuxState
	}
	return nil
}

func (m *ParkerState) GetOutputAuxState() *Int64 {
	if m != nil {
		return m.OutputAuxState
	}
	return nil
}

func (m *ParkerState) GetResistorsState() *Int64 {
	if m != nil {
		return m.ResistorsState
	}
	return nil
}

func (m *ParkerState) GetOutputAlarmState() *Int64 {
	if m != nil {
		return m.OutputAlarmState
	}
	return nil
}

func (m *ParkerState) GetSecondCompressorState() *Int64 {
	if m != nil {
		return m.SecondCompressorState
	}
	return nil
}

func (m *ParkerState) GetSetpoint() *Double {
	if m != nil {
		return m.Setpoint
	}
	return nil
}

func (m *ParkerState) GetR1() *Double {
	if m != nil {
		return m.R1
	}
	return nil
}

func (m *ParkerState) GetR2() *Double {
	if m != nil {
		return m.R2
	}
	return nil
}

func (m *ParkerState) GetR4() *Double {
	if m != nil {
		return m.R4
	}
	return nil
}

func (m *ParkerState) GetC0() *Double {
	if m != nil {
		return m.C0
	}
	return nil
}

func (m *ParkerState) GetC1() *Double {
	if m != nil {
		return m.C1
	}
	return nil
}

func (m *ParkerState) GetD0() *Double {
	if m != nil {
		return m.D0
	}
	return nil
}

func (m *ParkerState) GetD3() *Double {
	if m != nil {
		return m.D3
	}
	return nil
}

func (m *ParkerState) GetD5() *Double {
	if m != nil {
		return m.D5
	}
	return nil
}

func (m *ParkerState) GetD7() *Double {
	if m != nil {
		return m.D7
	}
	return nil
}

func (m *ParkerState) GetD8() *Int64 {
	if m != nil {
		return m.D8
	}
	return nil
}

func (m *ParkerState) GetA0() *Int64 {
	if m != nil {
		return m.A0
	}
	return nil
}

func (m *ParkerState) GetA1() *Double {
	if m != nil {
		return m.A1
	}
	return nil
}

func (m *ParkerState) GetA2() *Int64 {
	if m != nil {
		return m.A2
	}
	return nil
}

func (m *ParkerState) GetA3() *Int64 {
	if m != nil {
		return m.A3
	}
	return nil
}

func (m *ParkerState) GetA4() *Double {
	if m != nil {
		return m.A4
	}
	return nil
}

func (m *ParkerState) GetA5() *Int64 {
	if m != nil {
		return m.A5
	}
	return nil
}

func (m *ParkerState) GetA6() *Double {
	if m != nil {
		return m.A6
	}
	return nil
}

func (m *ParkerState) GetA7() *Double {
	if m != nil {
		return m.A7
	}
	return nil
}

func (m *ParkerState) GetA8() *Double {
	if m != nil {
		return m.A8
	}
	return nil
}

func (m *ParkerState) GetA9() *Double {
	if m != nil {
		return m.A9
	}
	return nil
}

func (m *ParkerState) GetF0() *Int64 {
	if m != nil {
		return m.F0
	}
	return nil
}

func (m *ParkerState) GetF1() *Double {
	if m != nil {
		return m.F1
	}
	return nil
}

func (m *ParkerState) GetF2() *Int64 {
	if m != nil {
		return m.F2
	}
	return nil
}

func (m *ParkerState) GetF3() *Double {
	if m != nil {
		return m.F3
	}
	return nil
}

func (m *ParkerState) GetHd1() *Double {
	if m != nil {
		return m.Hd1
	}
	return nil
}

func (m *ParkerState) GetHd2() *Double {
	if m != nil {
		return m.Hd2
	}
	return nil
}

func (m *ParkerState) GetHd3() *Double {
	if m != nil {
		return m.Hd3
	}
	return nil
}

func (m *ParkerState) GetHd4() *Double {
	if m != nil {
		return m.Hd4
	}
	return nil
}

func (m *ParkerState) GetHd5() *Double {
	if m != nil {
		return m.Hd5
	}
	return nil
}

func (m *ParkerState) GetHd6() *Double {
	if m != nil {
		return m.Hd6
	}
	return nil
}

func (m *ParkerState) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func init() {
	proto.RegisterType((*ParkerState)(nil), "xbospb.ParkerState")
}

func init() { proto.RegisterFile("parker.proto", fileDescriptor_48357db32399db41) }

var fileDescriptor_48357db32399db41 = []byte{
	// 1324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x98, 0xe9, 0x73, 0x13, 0xb7,
	0x1b, 0xc7, 0x87, 0xc0, 0x8f, 0x1f, 0x28, 0x90, 0x63, 0x73, 0x29, 0x5c, 0x0d, 0x50, 0x28, 0xa5,
	0x34, 0xf5, 0xed, 0x84, 0xa3, 0xc1, 0x38, 0x31, 0x49, 0xa1, 0xc0, 0x38, 0x69, 0xfb, 0xa6, 0xd3,
	0xad, 0xec, 0x55, 0x92, 0x9d, 0xac, 0xa5, 0xad, 0x56, 0x9b, 0xd8, 0xef, 0xfb, 0x87, 0x77, 0x74,
	0x78, 0xaf, 0x3c, 0xcb, 0x2b, 0x98, 0x79, 0x3e, 0xdf, 0xcf, 0x4a, 0x8f, 0x64, 0x49, 0x13, 0x74,
	0x2b, 0x24, 0xe2, 0x8c, 0x8a, 0xcd, 0x50, 0x70, 0xc9, 0x9d, 0xeb, 0xe3, 0x01, 0x8f, 0xc2, 0xc1,
	0x9d, 0x25, 0x16, 0x07, 0x01, 0x19, 0x04, 0x54, 0x4e, 0x42, 0x1a, 0x99, 0xe2, 0xa3, 0x7f, 0x1f,
	0xa2, 0xd9, 0x2f, 0x9a, 0x3e, 0x94, 0x44, 0x52, 0x67, 0x1f, 0xe1, 0x21, 0x1f, 0x85, 0x82, 0x46,
	0x11, 0x17, 0xee, 0x05, 0x17, 0x67, 0x3e, 0x3b, 0x71, 0x4f, 0x79, 0x2c, 0x22, 0x7c, 0x65, 0xe3,
	0xca, 0xb3, 0xd9, 0xda, 0xdc, 0xa6, 0xf1, 0x6d, 0xee, 0xf2, 0x78, 0x10, 0xd0, 0xfe, 0x6a, 0xca,
	0xff, 0x61, 0xf0, 0x7d, 0x45, 0x3b, 0xdb, 0x68, 0x91, 0x33, 0x37, 0x92, 0x84, 0x79, 0x83, 0x89,
	0xfa, 0x57, 0xc6, 0x11, 0x9e, 0xd1, 0x8a, 0xdb, 0x53, 0xc5, 0x01, 0x93, 0xad, 0x46, 0x7f, 0x9e,
	0xb3, 0x43, 0x83, 0x1d, 0x6a, 0xca, 0xa9, 0xa0, 0x5b, 0x81, 0x7f, 0x72, 0x2a, 0xa7, 0xa9, 0xab,
	0x50, 0x6a, 0x56, 0x23, 0x36, 0xb1, 0x8d, 0x16, 0x49, 0x3c, 0x76, 0x79, 0x2c, 0xc3, 0x38, 0x89,
	0x5d, 0x03, 0x3f, 0x46, 0xe2, 0xf1, 0x67, 0x8d, 0xd9, 0xe8, 0x5b, 0xb4, 0xcc, 0xe8, 0x58, 0xba,
	0x1e, 0x3d, 0x16, 0x3c, 0x92, 0xee, 0x90, 0xc7, 0x4c, 0x52, 0x81, 0xff, 0x07, 0xce, 0xd6, 0x51,
	0xec, 0xae, 0x41, 0xbb, 0x86, 0x74, 0x7a, 0x08, 0x7b, 0x9c, 0x0b, 0x37, 0xba, 0xf0, 0xe5, 0xf0,
	0xd4, 0xf5, 0x59, 0x66, 0x0c, 0xd7, 0xa1, 0x31, 0xac, 0x28, 0xfc, 0x50, 0xd3, 0x07, 0x2c, 0x1d,
	0xc9, 0x01, 0x5a, 0x1f, 0xc5, 0x81, 0xf4, 0xc3, 0x58, 0x84, 0x3c, 0xa2, 0x79, 0xd1, 0xff, 0x21,
	0xd1, 0x5a, 0x96, 0xcf, 0xaa, 0x5e, 0xa2, 0xc5, 0xcc, 0x32, 0x5a, 0xc5, 0x0d, 0x48, 0xb1, 0x90,
	0x72, 0x36, 0xdb, 0x41, 0x2b, 0xb6, 0x8f, 0xd3, 0x96, 0xd8, 0xfc, 0x4d, 0x28, 0xbf, 0x64, 0x58,
	0xdb, 0x12, 0xab, 0xd8, 0x44, 0xb3, 0xc7, 0x84, 0x45, 0xd3, 0x20, 0x82, 0x82, 0x48, 0x11, 0x96,
	0x6f, 0xa3, 0x05, 0xfb, 0xc9, 0xb3, 0xc6, 0x34, 0x34, 0x0b, 0x85, 0xe6, 0x0c, 0xf6, 0xa1, 0x61,
	0x83, 0x3b, 0x68, 0x69, 0x48, 0x06, 0x3e, 0xa3, 0xd2, 0x95, 0x74, 0x14, 0x52, 0x41, 0x64, 0x2c,
	0x28, 0xbe, 0x05, 0xaf, 0x9d, 0x45, 0x8f, 0x52, 0xd2, 0xd9, 0x43, 0xab, 0xf4, 0x9c, 0x84, 0x5c,
	0x10, 0xc9, 0x45, 0xce, 0x71, 0x1b, 0x74, 0xac, 0xa4, 0x74, 0x56, 0xd3, 0x45, 0x2b, 0x24, 0x1e,
	0xfb, 0x81, 0x4f, 0xc4, 0x24, 0x67, 0x99, 0x03, 0x2d, 0xcb, 0x09, 0x9c, 0x95, 0xec, 0xa0, 0xe5,
	0x50, 0xf0, 0x01, 0xad, 0xba, 0xc7, 0xc4, 0x0f, 0x62, 0x41, 0x5d, 0x12, 0x10, 0x31, 0xc2, 0xf3,
	0x50, 0x27, 0x1c, 0x83, 0xf6, 0x0c, 0xd9, 0x51, 0x60, 0x22, 0xa8, 0x15, 0x04, 0x0b, 0xe5, 0x82,
	0x1a, 0x28, 0xa8, 0x17, 0x04, 0x8b, 0xe5, 0x82, 0x7a, 0x4e, 0xa0, 0xb6, 0xb0, 0xcf, 0xfc, 0x51,
	0x3c, 0xca, 0x76, 0xc1, 0x5a, 0x1c, 0x78, 0x0b, 0x1b, 0x3e, 0xd3, 0x08, 0xa3, 0x7a, 0x8f, 0xf0,
	0x88, 0x8c, 0x33, 0xaa, 0x8c, 0x69, 0x09, 0x32, 0xad, 0x5a, 0xfc, 0x28, 0xa1, 0x8d, 0xe8, 0x4f,
	0xf4, 0x78, 0xc8, 0x99, 0x47, 0x59, 0x94, 0x5f, 0xe1, 0xc2, 0x1c, 0x97, 0x21, 0xe7, 0x46, 0x92,
	0xcc, 0x8c, 0x2f, 0x37, 0xe3, 0x37, 0x68, 0x29, 0xb5, 0x87, 0x89, 0x6d, 0x05, 0xb2, 0x2d, 0x26,
	0xe4, 0x97, 0x69, 0xfc, 0x05, 0x42, 0xfa, 0xec, 0x30, 0xa9, 0x55, 0x28, 0x75, 0x53, 0x01, 0x69,
	0x4f, 0x2e, 0x9f, 0x10, 0x26, 0xbb, 0x06, 0xf7, 0xa4, 0x78, 0x40, 0x24, 0xa2, 0xcc, 0xf9, 0x30,
	0x08, 0xf8, 0xf0, 0x8c, 0x7a, 0x56, 0x84, 0x41, 0x51, 0x8a, 0xbf, 0x33, 0x74, 0x32, 0xfd, 0x90,
	0x5f, 0x50, 0x51, 0x68, 0xe6, 0x3a, 0x38, 0x7d, 0x4d, 0xe6, 0xba, 0xd7, 0x44, 0xf3, 0x42, 0x0e,
	0x5d, 0x2a, 0x44, 0xd2, 0x83, 0x3b, 0x50, 0xf4, 0xb6, 0x90, 0xc3, 0x3d, 0x05, 0x99, 0xd8, 0x27,
	0x74, 0x8f, 0x32, 0x2a, 0x4e, 0x26, 0x6e, 0x44, 0xce, 0xd5, 0x05, 0x25, 0xe8, 0x49, 0x1c, 0xe8,
	0x9f, 0xf0, 0x71, 0x40, 0x4e, 0xf0, 0x5d, 0xc8, 0xb1, 0x6e, 0x22, 0x87, 0x3a, 0xd1, 0x9f, 0x06,
	0x7a, 0x01, 0x39, 0x71, 0xfe, 0x46, 0x4f, 0x8b, 0x3e, 0x12, 0xb8, 0xd2, 0x1f, 0xd1, 0xa2, 0xf9,
	0x1e, 0x64, 0x7e, 0x98, 0x37, 0x93, 0xe0, 0xc8, 0x1f, 0xd1, 0xfc, 0x17, 0xfa, 0xe8, 0x41, 0x44,
	0xc5, 0xb9, 0x3f, 0x54, 0xc6, 0x7f, 0x62, 0x1a, 0xc9, 0xa2, 0xf9, 0x3e, 0x64, 0xbe, 0x6b, 0x43,
	0x7d, 0x93, 0xc9, 0x3b, 0xf7, 0xd1, 0x7a, 0xe6, 0x86, 0x2d, 0xe8, 0x1e, 0x80, 0xab, 0x98, 0xdc,
	0xb4, 0x79, 0xd3, 0x11, 0xda, 0x60, 0xf4, 0xc2, 0x2c, 0x80, 0x2b, 0xb9, 0x9a, 0xbe, 0x57, 0x14,
	0x7e, 0x03, 0x8e, 0x8f, 0xd1, 0x0b, 0xbd, 0x24, 0x47, 0xbc, 0x4f, 0x89, 0x97, 0xb7, 0x7e, 0x41,
	0xf7, 0xf3, 0x37, 0x48, 0x51, 0xb9, 0x01, 0x29, 0xef, 0x78, 0xd9, 0xab, 0x24, 0x6f, 0x6c, 0xa3,
	0x79, 0x32, 0x94, 0xfe, 0x39, 0x75, 0x23, 0x2a, 0x43, 0xee, 0x33, 0x89, 0x1f, 0x82, 0x07, 0xec,
	0x9c, 0xc1, 0x0e, 0x2d, 0xe5, 0xbc, 0x46, 0x8e, 0x5e, 0xcd, 0x98, 0x49, 0x3f, 0x98, 0xde, 0x6b,
	0xf8, 0x11, 0x98, 0x5d, 0x50, 0xe4, 0x6f, 0x0a, 0xb4, 0x97, 0x9a, 0xb3, 0x87, 0xd6, 0x86, 0xb1,
	0x10, 0x94, 0x5d, 0x7e, 0x25, 0x3c, 0x06, 0xef, 0x77, 0x4b, 0x17, 0xde, 0x09, 0x5b, 0x28, 0x73,
	0xd9, 0xba, 0x1e, 0x0d, 0xc8, 0x04, 0x7f, 0x0b, 0xbe, 0x51, 0x52, 0x6c, 0x57, 0x51, 0xce, 0x5b,
	0xb4, 0xc2, 0xe2, 0x91, 0x59, 0x9f, 0xc8, 0xf5, 0x99, 0x7b, 0xea, 0x47, 0x92, 0x8b, 0x09, 0x7e,
	0x02, 0x1e, 0xcc, 0x2c, 0x1e, 0xe9, 0x45, 0x89, 0x0e, 0xd8, 0xbe, 0x01, 0xd5, 0xc9, 0x9e, 0xdf,
	0xe1, 0xf6, 0x96, 0x7d, 0x0a, 0x0a, 0xb2, 0xfb, 0xd9, 0xde, 0xb4, 0x5d, 0xb4, 0x5a, 0xdc, 0xc0,
	0x56, 0xf1, 0x1d, 0xa4, 0x58, 0xce, 0x6f, 0x5c, 0x2b, 0xf9, 0x0b, 0x3d, 0x11, 0x34, 0xd2, 0x43,
	0x8a, 0x5c, 0xbd, 0x44, 0x44, 0x52, 0xcf, 0x1d, 0x4c, 0x5c, 0xf5, 0x7a, 0x3b, 0xa3, 0xc9, 0x3b,
	0xf1, 0x19, 0x78, 0x18, 0x27, 0xd9, 0xce, 0x34, 0xfa, 0x6e, 0xd2, 0x89, 0xc7, 0x1f, 0xe8, 0x24,
	0x1d, 0x64, 0xe6, 0x36, 0x3f, 0x27, 0x81, 0xda, 0x29, 0xea, 0x5d, 0x8b, 0xbf, 0x07, 0x07, 0x99,
	0xc2, 0xbf, 0x2b, 0xd6, 0x3c, 0x81, 0x77, 0xd0, 0x32, 0xf0, 0xfe, 0xa1, 0xf8, 0x39, 0xd8, 0xaa,
	0x4b, 0xcf, 0x1f, 0x9a, 0x79, 0xcd, 0x04, 0xf1, 0xd8, 0x86, 0x7f, 0xf8, 0xca, 0x6b, 0xe6, 0x63,
	0x3c, 0x2e, 0x06, 0x49, 0x12, 0x7c, 0xf1, 0x95, 0x60, 0x67, 0x1a, 0x6c, 0xa1, 0xf9, 0xb4, 0xaf,
	0x26, 0xf7, 0x23, 0x98, 0x4b, 0x28, 0x93, 0x7b, 0x85, 0x9c, 0xe9, 0x07, 0xf5, 0x4f, 0xdf, 0x44,
	0x37, 0xc1, 0x77, 0xa2, 0xfd, 0xa4, 0xe2, 0x4c, 0x78, 0x0f, 0xad, 0x45, 0x54, 0xdd, 0x68, 0x6e,
	0xe1, 0xa9, 0x49, 0xf1, 0x4f, 0xe0, 0xaf, 0xc2, 0xd0, 0xdd, 0xdc, 0x7b, 0x93, 0x3a, 0xcf, 0xd1,
	0x8d, 0xe4, 0xc7, 0x5c, 0x01, 0x7f, 0x90, 0x49, 0xdd, 0x79, 0x80, 0x66, 0x44, 0x15, 0x57, 0x41,
	0x6a, 0x46, 0x54, 0x75, 0xbd, 0x86, 0x6b, 0x25, 0xf5, 0x9a, 0xae, 0x37, 0x70, 0xbd, 0xa4, 0xde,
	0x50, 0xf5, 0x6e, 0x05, 0x37, 0xe0, 0x7a, 0xb7, 0xa2, 0xeb, 0x55, 0xdc, 0x2c, 0xa9, 0xeb, 0xef,
	0x7b, 0x15, 0xdc, 0x82, 0xeb, 0x9e, 0xce, 0x7b, 0x75, 0xdc, 0x2e, 0xa9, 0xd7, 0x75, 0xbd, 0x89,
	0xb7, 0x4a, 0xea, 0x4d, 0x5d, 0x6f, 0xe3, 0xed, 0x92, 0x7a, 0xdb, 0xb9, 0x8f, 0x66, 0xbc, 0x2d,
	0xfc, 0x12, 0xea, 0xfe, 0x8c, 0xb7, 0xa5, 0xca, 0x9d, 0x0a, 0x7e, 0x05, 0x96, 0x3b, 0x7a, 0x74,
	0x9d, 0x2a, 0x7e, 0x0d, 0xdb, 0x3b, 0x55, 0x1d, 0xaf, 0xe1, 0x37, 0x70, 0xbc, 0xa6, 0xcb, 0x75,
	0xfc, 0x33, 0x5c, 0xd6, 0x73, 0xeb, 0x34, 0xf0, 0x4e, 0x89, 0xbd, 0xa1, 0xe3, 0x4d, 0xfc, 0x16,
	0x8e, 0xeb, 0xa9, 0x77, 0x5a, 0xb8, 0x53, 0x12, 0x6f, 0xe9, 0x7a, 0x1b, 0xbf, 0x2b, 0xa9, 0xb7,
	0x75, 0x7d, 0x0b, 0x77, 0x4b, 0xea, 0x5b, 0xba, 0xbe, 0x8d, 0x77, 0x4b, 0xea, 0xdb, 0x6a, 0x78,
	0xbd, 0x0a, 0xde, 0x03, 0x87, 0xd7, 0xd3, 0xbd, 0xeb, 0x55, 0x71, 0x0f, 0x8e, 0xf7, 0x74, 0xef,
	0x7a, 0x35, 0xfc, 0x1e, 0x8e, 0xeb, 0x8d, 0xd9, 0xab, 0xe3, 0xfd, 0x92, 0x78, 0xdd, 0xd9, 0x40,
	0x57, 0xf7, 0xbd, 0x2a, 0x3e, 0x00, 0x01, 0x55, 0x32, 0x44, 0x0d, 0xff, 0x52, 0x46, 0xd4, 0x0c,
	0x51, 0xc7, 0x1f, 0xca, 0x08, 0xfb, 0x95, 0x06, 0xfe, 0x58, 0x46, 0x34, 0x0c, 0xd1, 0xc4, 0xbf,
	0x96, 0x11, 0x4d, 0x43, 0xb4, 0xf0, 0xa7, 0x32, 0xa2, 0xe5, 0x38, 0xe8, 0x9a, 0xba, 0x61, 0xf1,
	0xe7, 0x8d, 0x2b, 0xcf, 0xae, 0xf5, 0xf5, 0xff, 0x07, 0xd7, 0xf5, 0x5f, 0x23, 0xea, 0xff, 0x05,
	0x00, 0x00, 0xff, 0xff, 0xac, 0x2b, 0xa4, 0xdd, 0xba, 0x10, 0x00, 0x00,
}

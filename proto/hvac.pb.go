// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hvac.proto

package xbospb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AHU struct {
	DischargeAirTemperatureSetpoint     *Double  `protobuf:"bytes,1,opt,name=discharge_air_temperature_setpoint,json=dischargeAirTemperatureSetpoint,proto3" json:"discharge_air_temperature_setpoint,omitempty"`
	OutsideAirTemperatureSensor         *Double  `protobuf:"bytes,2,opt,name=outside_air_temperature_sensor,json=outsideAirTemperatureSensor,proto3" json:"outside_air_temperature_sensor,omitempty"`
	HeatingValveCommand                 *Double  `protobuf:"bytes,3,opt,name=heating_valve_command,json=heatingValveCommand,proto3" json:"heating_valve_command,omitempty"`
	DischargeAirStaticPressureSensor    *Double  `protobuf:"bytes,4,opt,name=discharge_air_static_pressure_sensor,json=dischargeAirStaticPressureSensor,proto3" json:"discharge_air_static_pressure_sensor,omitempty"`
	CoolingDemand                       *Double  `protobuf:"bytes,5,opt,name=cooling_demand,json=coolingDemand,proto3" json:"cooling_demand,omitempty"`
	CoolingValveCommand                 *Double  `protobuf:"bytes,6,opt,name=cooling_valve_command,json=coolingValveCommand,proto3" json:"cooling_valve_command,omitempty"`
	MixedAirTemperatureSensor           *Double  `protobuf:"bytes,7,opt,name=mixed_air_temperature_sensor,json=mixedAirTemperatureSensor,proto3" json:"mixed_air_temperature_sensor,omitempty"`
	BuildingStaticPressureSensor        *Double  `protobuf:"bytes,8,opt,name=building_static_pressure_sensor,json=buildingStaticPressureSensor,proto3" json:"building_static_pressure_sensor,omitempty"`
	FilterStatus                        *Double  `protobuf:"bytes,9,opt,name=filter_status,json=filterStatus,proto3" json:"filter_status,omitempty"`
	DischargeAirTemperatureSensor       *Double  `protobuf:"bytes,10,opt,name=discharge_air_temperature_sensor,json=dischargeAirTemperatureSensor,proto3" json:"discharge_air_temperature_sensor,omitempty"`
	BuildingStaticPressureSetpoint      *Double  `protobuf:"bytes,11,opt,name=building_static_pressure_setpoint,json=buildingStaticPressureSetpoint,proto3" json:"building_static_pressure_setpoint,omitempty"`
	DischargeAirStaticPressureSetpoint  *Double  `protobuf:"bytes,12,opt,name=discharge_air_static_pressure_setpoint,json=dischargeAirStaticPressureSetpoint,proto3" json:"discharge_air_static_pressure_setpoint,omitempty"`
	OccupancyCommand                    *Double  `protobuf:"bytes,13,opt,name=occupancy_command,json=occupancyCommand,proto3" json:"occupancy_command,omitempty"`
	ReturnAirTemperatureSensor          *Double  `protobuf:"bytes,14,opt,name=return_air_temperature_sensor,json=returnAirTemperatureSensor,proto3" json:"return_air_temperature_sensor,omitempty"`
	ZoneTemperatureSensor               *Double  `protobuf:"bytes,15,opt,name=zone_temperature_sensor,json=zoneTemperatureSensor,proto3" json:"zone_temperature_sensor,omitempty"`
	SupplyAirDamperMinPositionSetpoint  *Double  `protobuf:"bytes,16,opt,name=supply_air_damper_min_position_setpoint,json=supplyAirDamperMinPositionSetpoint,proto3" json:"supply_air_damper_min_position_setpoint,omitempty"`
	MixedAirTemperatureSetpoint         *Double  `protobuf:"bytes,17,opt,name=mixed_air_temperature_setpoint,json=mixedAirTemperatureSetpoint,proto3" json:"mixed_air_temperature_setpoint,omitempty"`
	OccupiedModeStatus                  *Double  `protobuf:"bytes,18,opt,name=occupied_mode_status,json=occupiedModeStatus,proto3" json:"occupied_mode_status,omitempty"`
	ShutdownCommand                     *Double  `protobuf:"bytes,19,opt,name=shutdown_command,json=shutdownCommand,proto3" json:"shutdown_command,omitempty"`
	MixedAirTemperatureLowLimitSetpoint *Double  `protobuf:"bytes,20,opt,name=mixed_air_temperature_low_limit_setpoint,json=mixedAirTemperatureLowLimitSetpoint,proto3" json:"mixed_air_temperature_low_limit_setpoint,omitempty"`
	ZoneTemperatureSetpoint             *Double  `protobuf:"bytes,21,opt,name=zone_temperature_setpoint,json=zoneTemperatureSetpoint,proto3" json:"zone_temperature_setpoint,omitempty"`
	Vav                                 *Double  `protobuf:"bytes,22,opt,name=vav,proto3" json:"vav,omitempty"`
	Vvt                                 *Double  `protobuf:"bytes,23,opt,name=vvt,proto3" json:"vvt,omitempty"`
	XXX_NoUnkeyedLiteral                struct{} `json:"-"`
	XXX_unrecognized                    []byte   `json:"-"`
	XXX_sizecache                       int32    `json:"-"`
}

func (m *AHU) Reset()         { *m = AHU{} }
func (m *AHU) String() string { return proto.CompactTextString(m) }
func (*AHU) ProtoMessage()    {}
func (*AHU) Descriptor() ([]byte, []int) {
	return fileDescriptor_f469fa1173d482d8, []int{0}
}

func (m *AHU) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AHU.Unmarshal(m, b)
}
func (m *AHU) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AHU.Marshal(b, m, deterministic)
}
func (m *AHU) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AHU.Merge(m, src)
}
func (m *AHU) XXX_Size() int {
	return xxx_messageInfo_AHU.Size(m)
}
func (m *AHU) XXX_DiscardUnknown() {
	xxx_messageInfo_AHU.DiscardUnknown(m)
}

var xxx_messageInfo_AHU proto.InternalMessageInfo

func (m *AHU) GetDischargeAirTemperatureSetpoint() *Double {
	if m != nil {
		return m.DischargeAirTemperatureSetpoint
	}
	return nil
}

func (m *AHU) GetOutsideAirTemperatureSensor() *Double {
	if m != nil {
		return m.OutsideAirTemperatureSensor
	}
	return nil
}

func (m *AHU) GetHeatingValveCommand() *Double {
	if m != nil {
		return m.HeatingValveCommand
	}
	return nil
}

func (m *AHU) GetDischargeAirStaticPressureSensor() *Double {
	if m != nil {
		return m.DischargeAirStaticPressureSensor
	}
	return nil
}

func (m *AHU) GetCoolingDemand() *Double {
	if m != nil {
		return m.CoolingDemand
	}
	return nil
}

func (m *AHU) GetCoolingValveCommand() *Double {
	if m != nil {
		return m.CoolingValveCommand
	}
	return nil
}

func (m *AHU) GetMixedAirTemperatureSensor() *Double {
	if m != nil {
		return m.MixedAirTemperatureSensor
	}
	return nil
}

func (m *AHU) GetBuildingStaticPressureSensor() *Double {
	if m != nil {
		return m.BuildingStaticPressureSensor
	}
	return nil
}

func (m *AHU) GetFilterStatus() *Double {
	if m != nil {
		return m.FilterStatus
	}
	return nil
}

func (m *AHU) GetDischargeAirTemperatureSensor() *Double {
	if m != nil {
		return m.DischargeAirTemperatureSensor
	}
	return nil
}

func (m *AHU) GetBuildingStaticPressureSetpoint() *Double {
	if m != nil {
		return m.BuildingStaticPressureSetpoint
	}
	return nil
}

func (m *AHU) GetDischargeAirStaticPressureSetpoint() *Double {
	if m != nil {
		return m.DischargeAirStaticPressureSetpoint
	}
	return nil
}

func (m *AHU) GetOccupancyCommand() *Double {
	if m != nil {
		return m.OccupancyCommand
	}
	return nil
}

func (m *AHU) GetReturnAirTemperatureSensor() *Double {
	if m != nil {
		return m.ReturnAirTemperatureSensor
	}
	return nil
}

func (m *AHU) GetZoneTemperatureSensor() *Double {
	if m != nil {
		return m.ZoneTemperatureSensor
	}
	return nil
}

func (m *AHU) GetSupplyAirDamperMinPositionSetpoint() *Double {
	if m != nil {
		return m.SupplyAirDamperMinPositionSetpoint
	}
	return nil
}

func (m *AHU) GetMixedAirTemperatureSetpoint() *Double {
	if m != nil {
		return m.MixedAirTemperatureSetpoint
	}
	return nil
}

func (m *AHU) GetOccupiedModeStatus() *Double {
	if m != nil {
		return m.OccupiedModeStatus
	}
	return nil
}

func (m *AHU) GetShutdownCommand() *Double {
	if m != nil {
		return m.ShutdownCommand
	}
	return nil
}

func (m *AHU) GetMixedAirTemperatureLowLimitSetpoint() *Double {
	if m != nil {
		return m.MixedAirTemperatureLowLimitSetpoint
	}
	return nil
}

func (m *AHU) GetZoneTemperatureSetpoint() *Double {
	if m != nil {
		return m.ZoneTemperatureSetpoint
	}
	return nil
}

func (m *AHU) GetVav() *Double {
	if m != nil {
		return m.Vav
	}
	return nil
}

func (m *AHU) GetVvt() *Double {
	if m != nil {
		return m.Vvt
	}
	return nil
}

type Economizer struct {
	EconomizerDifferentialAirTemperatureSetpoint *Double  `protobuf:"bytes,1,opt,name=economizer_differential_air_temperature_setpoint,json=economizerDifferentialAirTemperatureSetpoint,proto3" json:"economizer_differential_air_temperature_setpoint,omitempty"`
	XXX_NoUnkeyedLiteral                         struct{} `json:"-"`
	XXX_unrecognized                             []byte   `json:"-"`
	XXX_sizecache                                int32    `json:"-"`
}

func (m *Economizer) Reset()         { *m = Economizer{} }
func (m *Economizer) String() string { return proto.CompactTextString(m) }
func (*Economizer) ProtoMessage()    {}
func (*Economizer) Descriptor() ([]byte, []int) {
	return fileDescriptor_f469fa1173d482d8, []int{1}
}

func (m *Economizer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Economizer.Unmarshal(m, b)
}
func (m *Economizer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Economizer.Marshal(b, m, deterministic)
}
func (m *Economizer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Economizer.Merge(m, src)
}
func (m *Economizer) XXX_Size() int {
	return xxx_messageInfo_Economizer.Size(m)
}
func (m *Economizer) XXX_DiscardUnknown() {
	xxx_messageInfo_Economizer.DiscardUnknown(m)
}

var xxx_messageInfo_Economizer proto.InternalMessageInfo

func (m *Economizer) GetEconomizerDifferentialAirTemperatureSetpoint() *Double {
	if m != nil {
		return m.EconomizerDifferentialAirTemperatureSetpoint
	}
	return nil
}

type VAV struct {
	ZoneTemperatureSetpoint                 *Double  `protobuf:"bytes,1,opt,name=zone_temperature_setpoint,json=zoneTemperatureSetpoint,proto3" json:"zone_temperature_setpoint,omitempty"`
	OccupiedHeatingMinSupplyAirFlowSetpoint *Double  `protobuf:"bytes,2,opt,name=occupied_heating_min_supply_air_flow_setpoint,json=occupiedHeatingMinSupplyAirFlowSetpoint,proto3" json:"occupied_heating_min_supply_air_flow_setpoint,omitempty"`
	SupplyAirFlowSetpoint                   *Double  `protobuf:"bytes,3,opt,name=supply_air_flow_setpoint,json=supplyAirFlowSetpoint,proto3" json:"supply_air_flow_setpoint,omitempty"`
	DischargeAirTemperatureSensor           *Double  `protobuf:"bytes,4,opt,name=discharge_air_temperature_sensor,json=dischargeAirTemperatureSensor,proto3" json:"discharge_air_temperature_sensor,omitempty"`
	HeatingDemand                           *Double  `protobuf:"bytes,5,opt,name=heating_demand,json=heatingDemand,proto3" json:"heating_demand,omitempty"`
	BoxMode                                 *Double  `protobuf:"bytes,6,opt,name=box_mode,json=boxMode,proto3" json:"box_mode,omitempty"`
	CoolingDemand                           *Double  `protobuf:"bytes,7,opt,name=cooling_demand,json=coolingDemand,proto3" json:"cooling_demand,omitempty"`
	SupplyAirVelocityPressureSensor         *Double  `protobuf:"bytes,8,opt,name=supply_air_velocity_pressure_sensor,json=supplyAirVelocityPressureSensor,proto3" json:"supply_air_velocity_pressure_sensor,omitempty"`
	CoolingMaxSupplyAirFlowSetpoint         *Double  `protobuf:"bytes,9,opt,name=cooling_max_supply_air_flow_setpoint,json=coolingMaxSupplyAirFlowSetpoint,proto3" json:"cooling_max_supply_air_flow_setpoint,omitempty"`
	ThermostatAdjustSetpoint                *Double  `protobuf:"bytes,10,opt,name=thermostat_adjust_setpoint,json=thermostatAdjustSetpoint,proto3" json:"thermostat_adjust_setpoint,omitempty"`
	ZoneTemperatureSensor                   *Double  `protobuf:"bytes,11,opt,name=zone_temperature_sensor,json=zoneTemperatureSensor,proto3" json:"zone_temperature_sensor,omitempty"`
	SupplyAirFlowSensor                     *Double  `protobuf:"bytes,12,opt,name=supply_air_flow_sensor,json=supplyAirFlowSensor,proto3" json:"supply_air_flow_sensor,omitempty"`
	XXX_NoUnkeyedLiteral                    struct{} `json:"-"`
	XXX_unrecognized                        []byte   `json:"-"`
	XXX_sizecache                           int32    `json:"-"`
}

func (m *VAV) Reset()         { *m = VAV{} }
func (m *VAV) String() string { return proto.CompactTextString(m) }
func (*VAV) ProtoMessage()    {}
func (*VAV) Descriptor() ([]byte, []int) {
	return fileDescriptor_f469fa1173d482d8, []int{2}
}

func (m *VAV) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VAV.Unmarshal(m, b)
}
func (m *VAV) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VAV.Marshal(b, m, deterministic)
}
func (m *VAV) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VAV.Merge(m, src)
}
func (m *VAV) XXX_Size() int {
	return xxx_messageInfo_VAV.Size(m)
}
func (m *VAV) XXX_DiscardUnknown() {
	xxx_messageInfo_VAV.DiscardUnknown(m)
}

var xxx_messageInfo_VAV proto.InternalMessageInfo

func (m *VAV) GetZoneTemperatureSetpoint() *Double {
	if m != nil {
		return m.ZoneTemperatureSetpoint
	}
	return nil
}

func (m *VAV) GetOccupiedHeatingMinSupplyAirFlowSetpoint() *Double {
	if m != nil {
		return m.OccupiedHeatingMinSupplyAirFlowSetpoint
	}
	return nil
}

func (m *VAV) GetSupplyAirFlowSetpoint() *Double {
	if m != nil {
		return m.SupplyAirFlowSetpoint
	}
	return nil
}

func (m *VAV) GetDischargeAirTemperatureSensor() *Double {
	if m != nil {
		return m.DischargeAirTemperatureSensor
	}
	return nil
}

func (m *VAV) GetHeatingDemand() *Double {
	if m != nil {
		return m.HeatingDemand
	}
	return nil
}

func (m *VAV) GetBoxMode() *Double {
	if m != nil {
		return m.BoxMode
	}
	return nil
}

func (m *VAV) GetCoolingDemand() *Double {
	if m != nil {
		return m.CoolingDemand
	}
	return nil
}

func (m *VAV) GetSupplyAirVelocityPressureSensor() *Double {
	if m != nil {
		return m.SupplyAirVelocityPressureSensor
	}
	return nil
}

func (m *VAV) GetCoolingMaxSupplyAirFlowSetpoint() *Double {
	if m != nil {
		return m.CoolingMaxSupplyAirFlowSetpoint
	}
	return nil
}

func (m *VAV) GetThermostatAdjustSetpoint() *Double {
	if m != nil {
		return m.ThermostatAdjustSetpoint
	}
	return nil
}

func (m *VAV) GetZoneTemperatureSensor() *Double {
	if m != nil {
		return m.ZoneTemperatureSensor
	}
	return nil
}

func (m *VAV) GetSupplyAirFlowSensor() *Double {
	if m != nil {
		return m.SupplyAirFlowSensor
	}
	return nil
}

type Damper struct {
	DamperPositionCommand *Double  `protobuf:"bytes,1,opt,name=damper_position_command,json=damperPositionCommand,proto3" json:"damper_position_command,omitempty"`
	DamperPositionSensor  *Double  `protobuf:"bytes,2,opt,name=damper_position_sensor,json=damperPositionSensor,proto3" json:"damper_position_sensor,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *Damper) Reset()         { *m = Damper{} }
func (m *Damper) String() string { return proto.CompactTextString(m) }
func (*Damper) ProtoMessage()    {}
func (*Damper) Descriptor() ([]byte, []int) {
	return fileDescriptor_f469fa1173d482d8, []int{3}
}

func (m *Damper) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Damper.Unmarshal(m, b)
}
func (m *Damper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Damper.Marshal(b, m, deterministic)
}
func (m *Damper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Damper.Merge(m, src)
}
func (m *Damper) XXX_Size() int {
	return xxx_messageInfo_Damper.Size(m)
}
func (m *Damper) XXX_DiscardUnknown() {
	xxx_messageInfo_Damper.DiscardUnknown(m)
}

var xxx_messageInfo_Damper proto.InternalMessageInfo

func (m *Damper) GetDamperPositionCommand() *Double {
	if m != nil {
		return m.DamperPositionCommand
	}
	return nil
}

func (m *Damper) GetDamperPositionSensor() *Double {
	if m != nil {
		return m.DamperPositionSensor
	}
	return nil
}

type Fan struct {
	OnOffCommand         *Double  `protobuf:"bytes,1,opt,name=on_off_command,json=onOffCommand,proto3" json:"on_off_command,omitempty"`
	FanSpeedSetpoint     *Double  `protobuf:"bytes,2,opt,name=fan_speed_setpoint,json=fanSpeedSetpoint,proto3" json:"fan_speed_setpoint,omitempty"`
	FanResetCommand      *Double  `protobuf:"bytes,3,opt,name=fan_reset_command,json=fanResetCommand,proto3" json:"fan_reset_command,omitempty"`
	FanOverloadAlarm     *Double  `protobuf:"bytes,4,opt,name=fan_overload_alarm,json=fanOverloadAlarm,proto3" json:"fan_overload_alarm,omitempty"`
	VfdAlarm             *Double  `protobuf:"bytes,5,opt,name=vfd_alarm,json=vfdAlarm,proto3" json:"vfd_alarm,omitempty"`
	FanStatus            *Double  `protobuf:"bytes,6,opt,name=fan_status,json=fanStatus,proto3" json:"fan_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Fan) Reset()         { *m = Fan{} }
func (m *Fan) String() string { return proto.CompactTextString(m) }
func (*Fan) ProtoMessage()    {}
func (*Fan) Descriptor() ([]byte, []int) {
	return fileDescriptor_f469fa1173d482d8, []int{4}
}

func (m *Fan) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Fan.Unmarshal(m, b)
}
func (m *Fan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Fan.Marshal(b, m, deterministic)
}
func (m *Fan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fan.Merge(m, src)
}
func (m *Fan) XXX_Size() int {
	return xxx_messageInfo_Fan.Size(m)
}
func (m *Fan) XXX_DiscardUnknown() {
	xxx_messageInfo_Fan.DiscardUnknown(m)
}

var xxx_messageInfo_Fan proto.InternalMessageInfo

func (m *Fan) GetOnOffCommand() *Double {
	if m != nil {
		return m.OnOffCommand
	}
	return nil
}

func (m *Fan) GetFanSpeedSetpoint() *Double {
	if m != nil {
		return m.FanSpeedSetpoint
	}
	return nil
}

func (m *Fan) GetFanResetCommand() *Double {
	if m != nil {
		return m.FanResetCommand
	}
	return nil
}

func (m *Fan) GetFanOverloadAlarm() *Double {
	if m != nil {
		return m.FanOverloadAlarm
	}
	return nil
}

func (m *Fan) GetVfdAlarm() *Double {
	if m != nil {
		return m.VfdAlarm
	}
	return nil
}

func (m *Fan) GetFanStatus() *Double {
	if m != nil {
		return m.FanStatus
	}
	return nil
}

func init() {
	proto.RegisterType((*AHU)(nil), "xbospb.AHU")
	proto.RegisterType((*Economizer)(nil), "xbospb.Economizer")
	proto.RegisterType((*VAV)(nil), "xbospb.VAV")
	proto.RegisterType((*Damper)(nil), "xbospb.Damper")
	proto.RegisterType((*Fan)(nil), "xbospb.Fan")
}

func init() { proto.RegisterFile("hvac.proto", fileDescriptor_f469fa1173d482d8) }

var fileDescriptor_f469fa1173d482d8 = []byte{
	// 1579 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x99, 0x5d, 0x6f, 0x1b, 0x45,
	0x17, 0xc7, 0x35, 0x4d, 0x9a, 0x26, 0x93, 0xf7, 0xc9, 0x9b, 0x93, 0xa6, 0x49, 0xea, 0xe4, 0x69,
	0xf3, 0x3c, 0x0f, 0x4d, 0x4a, 0x7b, 0x17, 0x09, 0x81, 0x53, 0x37, 0x14, 0x11, 0xe3, 0x62, 0xa7,
	0x06, 0xca, 0xcb, 0x6a, 0xec, 0x9d, 0x8d, 0xb7, 0xac, 0x77, 0x56, 0xbb, 0x6b, 0xc7, 0x29, 0xbd,
	0x8a, 0x40, 0x5c, 0x21, 0x21, 0x90, 0x10, 0x17, 0x48, 0xdc, 0x20, 0x21, 0x21, 0x21, 0x81, 0x50,
	0x11, 0x2a, 0x57, 0x08, 0x89, 0x4f, 0xc0, 0x3d, 0x9f, 0xa1, 0x37, 0xdc, 0x82, 0x66, 0x76, 0x66,
	0xed, 0x38, 0xb3, 0x4e, 0x3b, 0x04, 0xca, 0x9d, 0x3d, 0x9e, 0xcc, 0xff, 0x37, 0xe7, 0x9c, 0x39,
	0x67, 0xce, 0x04, 0xc2, 0x6a, 0x03, 0x57, 0xd6, 0x3c, 0x9f, 0x86, 0x14, 0xf5, 0x35, 0xcb, 0x34,
	0xf0, 0xca, 0x73, 0x83, 0x65, 0xdf, 0xae, 0xbc, 0x1d, 0x0d, 0xce, 0x4d, 0xb8, 0x75, 0xc7, 0xc1,
	0x65, 0x87, 0x84, 0xfb, 0x1e, 0x09, 0xa2, 0xc1, 0xf4, 0x1f, 0xf3, 0xb0, 0x27, 0x73, 0xe3, 0x16,
	0xfa, 0x1e, 0xc0, 0xb4, 0x69, 0x07, 0x95, 0x2a, 0xf6, 0x77, 0x89, 0x81, 0x6d, 0xdf, 0x08, 0x49,
	0xcd, 0x23, 0x3e, 0x0e, 0xeb, 0x3e, 0x31, 0x02, 0x12, 0x7a, 0xd4, 0x76, 0xc3, 0x14, 0x58, 0x02,
	0xab, 0x83, 0x57, 0x46, 0xd6, 0xa2, 0xf5, 0xd7, 0xb2, 0xb4, 0x5e, 0x76, 0xc8, 0xe6, 0x6b, 0x07,
	0xf7, 0x53, 0x97, 0xe0, 0xff, 0xab, 0x61, 0xe8, 0x05, 0x1b, 0xeb, 0xeb, 0x5c, 0x34, 0xa8, 0x54,
	0x49, 0x0d, 0xaf, 0x51, 0x7f, 0x77, 0x3d, 0xfa, 0xb8, 0xfe, 0xf4, 0xda, 0xe5, 0xb5, 0xab, 0xeb,
	0x9b, 0xec, 0xc7, 0xe5, 0x83, 0xfb, 0xa9, 0x15, 0x94, 0xce, 0xc6, 0x82, 0x19, 0xdb, 0x37, 0x76,
	0xda, 0x04, 0x8b, 0x42, 0xb0, 0xb0, 0x18, 0x43, 0x65, 0x6c, 0xbf, 0x6d, 0x86, 0x9c, 0x80, 0xbe,
	0x02, 0x70, 0x81, 0xd6, 0xc3, 0xc0, 0x36, 0x55, 0xd8, 0x6e, 0x40, 0xfd, 0xd4, 0x29, 0x25, 0xf4,
	0x2d, 0x1d, 0xe8, 0x25, 0xb4, 0x90, 0x17, 0x62, 0x47, 0x91, 0x99, 0x58, 0xe1, 0xac, 0x80, 0xe9,
	0xc4, 0x65, 0x3f, 0xa2, 0x0f, 0x01, 0x9c, 0xaa, 0x12, 0x1c, 0xda, 0xee, 0xae, 0xd1, 0xc0, 0x4e,
	0x83, 0x18, 0x15, 0x5a, 0xab, 0x61, 0xd7, 0x4c, 0xf5, 0x28, 0x19, 0xb7, 0x75, 0x18, 0x67, 0xd0,
	0xd4, 0x0d, 0xa1, 0x51, 0xe2, 0x1a, 0xd7, 0x22, 0x8d, 0xc2, 0x84, 0x90, 0xe6, 0xa3, 0x62, 0x10,
	0xfd, 0x08, 0xe0, 0xca, 0x61, 0xc7, 0x07, 0x21, 0x0e, 0xed, 0x8a, 0xe1, 0xf9, 0x24, 0x08, 0xda,
	0xac, 0xd8, 0xab, 0x24, 0x7c, 0x5d, 0x87, 0xf0, 0x02, 0x5a, 0x39, 0xec, 0xfa, 0x62, 0x24, 0x79,
	0x53, 0x4a, 0x0a, 0x5b, 0x2e, 0xb5, 0x3b, 0x3f, 0x9a, 0x23, 0xa7, 0x08, 0x83, 0xde, 0x83, 0x23,
	0x15, 0x4a, 0x1d, 0xb6, 0x57, 0x93, 0x70, 0x43, 0x9e, 0x56, 0x62, 0x5e, 0xd7, 0xc1, 0x1c, 0x43,
	0x23, 0xd7, 0xc4, 0xe2, 0x59, 0xbe, 0x78, 0x61, 0x58, 0x88, 0x45, 0x5f, 0xb9, 0x3b, 0xa5, 0xfc,
	0x61, 0x77, 0xf6, 0x9d, 0xa8, 0x3b, 0x25, 0x45, 0x87, 0x3b, 0x85, 0xf4, 0x21, 0x77, 0x7e, 0x01,
	0xe0, 0x7c, 0xcd, 0x6e, 0x12, 0x33, 0xe9, 0x30, 0x9c, 0x51, 0x92, 0x15, 0x75, 0xc8, 0x16, 0xd0,
	0x7c, 0x8e, 0x4b, 0x25, 0x1c, 0x85, 0x59, 0x0e, 0xa2, 0x3c, 0x08, 0x5f, 0x03, 0xb8, 0x58, 0xae,
	0xdb, 0x8e, 0xc9, 0xb6, 0x95, 0x10, 0x70, 0xfd, 0x4a, 0xd2, 0x92, 0x0e, 0xe9, 0x79, 0xb4, 0xb8,
	0x29, 0xd5, 0x12, 0x62, 0x6d, 0x5e, 0xe2, 0x28, 0xe3, 0x6c, 0x1f, 0x0e, 0x5b, 0xb6, 0x13, 0x92,
	0xe8, 0x74, 0xd4, 0x83, 0xd4, 0x80, 0x12, 0x2e, 0xab, 0x03, 0x37, 0x8a, 0x86, 0xb7, 0xa2, 0xb5,
	0x8b, 0x7c, 0xed, 0xc2, 0x50, 0x24, 0x15, 0x7d, 0x43, 0xdf, 0x00, 0xb8, 0xd4, 0x2d, 0x33, 0x73,
	0x5b, 0x41, 0x25, 0xce, 0x2b, 0x3a, 0x38, 0x69, 0xb4, 0xd4, 0x2d, 0x2f, 0x73, 0x63, 0x9d, 0x4b,
	0xcc, 0xca, 0xdc, 0x5a, 0xdf, 0x01, 0x78, 0xbe, 0x8b, 0x77, 0x45, 0x2d, 0x19, 0x54, 0x32, 0xbf,
	0xaa, 0xc3, 0xbc, 0x8c, 0xce, 0x77, 0xf1, 0xaf, 0x28, 0x25, 0x0b, 0x49, 0x1e, 0x16, 0x95, 0xe4,
	0x27, 0x00, 0x2f, 0x1c, 0x97, 0x09, 0x05, 0xfa, 0x90, 0x12, 0xfd, 0x4d, 0x1d, 0xf4, 0x55, 0x74,
	0xe1, 0xb8, 0x5c, 0x28, 0xf8, 0xd3, 0xdd, 0xb2, 0xa1, 0xd8, 0xc3, 0x7b, 0x00, 0x8e, 0xd3, 0x4a,
	0xa5, 0xee, 0x61, 0xb7, 0xb2, 0x1f, 0x67, 0xa3, 0x61, 0x25, 0xee, 0x0d, 0x1d, 0xdc, 0x09, 0x34,
	0x9e, 0x8f, 0xd7, 0x97, 0x99, 0x68, 0x2c, 0x96, 0x94, 0x69, 0xe8, 0x4b, 0x00, 0xcf, 0xf9, 0x24,
	0xac, 0xfb, 0x6e, 0x52, 0xc4, 0x8e, 0x28, 0x99, 0x76, 0x74, 0x98, 0x16, 0xd1, 0xb9, 0x42, 0xa4,
	0x95, 0x10, 0xae, 0x73, 0x11, 0x8a, 0x32, 0x56, 0x3f, 0x01, 0x70, 0xe6, 0x2e, 0x75, 0x89, 0x8a,
	0x71, 0x54, 0xc9, 0xf8, 0x92, 0x0e, 0xe3, 0x2c, 0x9a, 0xb9, 0xcd, 0x54, 0x14, 0x74, 0x53, 0x4c,
	0xfe, 0x28, 0xd8, 0xcf, 0x00, 0x5e, 0x0c, 0xea, 0x9e, 0xe7, 0xec, 0x73, 0x13, 0x9a, 0x98, 0x4d,
	0x30, 0x6a, 0xb6, 0x6b, 0x78, 0x34, 0xb0, 0x43, 0x9b, 0xba, 0xad, 0x78, 0x1c, 0x53, 0x82, 0xbe,
	0xa5, 0x03, 0xfa, 0x5f, 0x74, 0xb1, 0x18, 0xa9, 0x32, 0x63, 0x66, 0x23, 0xd5, 0x9c, 0xed, 0x1a,
	0x37, 0xa5, 0x6a, 0x2b, 0x20, 0x23, 0xbc, 0x8c, 0xed, 0x47, 0xd3, 0x72, 0xb6, 0x2b, 0x27, 0x1d,
	0xba, 0x9e, 0x25, 0xd5, 0x23, 0x01, 0x3f, 0x7e, 0xa2, 0xd7, 0xb3, 0xa4, 0x8a, 0x24, 0x98, 0xcf,
	0x2a, 0x6b, 0x92, 0x80, 0xfd, 0x00, 0xc0, 0x49, 0x1e, 0xca, 0x36, 0x31, 0x8d, 0x1a, 0x35, 0x89,
	0xcc, 0xf6, 0x48, 0x89, 0xf8, 0xa2, 0x0e, 0xe2, 0x34, 0x9a, 0xcc, 0x4b, 0x89, 0x1c, 0x93, 0x10,
	0x49, 0x1f, 0x49, 0x61, 0x36, 0x28, 0x52, 0xff, 0x01, 0x80, 0x63, 0x41, 0xb5, 0x1e, 0x9a, 0x74,
	0xcf, 0x8d, 0x0f, 0xf3, 0x84, 0x92, 0xe5, 0x79, 0x1d, 0x16, 0x84, 0xc6, 0x8a, 0x72, 0x79, 0x79,
	0x96, 0x47, 0xa5, 0xa0, 0x3c, 0xca, 0xbf, 0x00, 0xb8, 0xaa, 0xf6, 0xa0, 0x43, 0xf7, 0x0c, 0xc7,
	0xae, 0xd9, 0x61, 0xcb, 0x97, 0x93, 0x4a, 0x38, 0x43, 0x07, 0xee, 0x7f, 0x68, 0x55, 0xed, 0xcb,
	0x6d, 0xba, 0x67, 0x6c, 0x73, 0xd9, 0xd8, 0xab, 0xcb, 0x0a, 0xaf, 0x6e, 0xd3, 0x3d, 0x3e, 0x2b,
	0xf6, 0xee, 0x67, 0x00, 0xce, 0x2a, 0x4e, 0xba, 0x20, 0x9f, 0x52, 0x92, 0xdf, 0xd4, 0x21, 0x3f,
	0x8b, 0x66, 0x15, 0x67, 0x5d, 0xa0, 0xce, 0x1c, 0x39, 0xed, 0x02, 0xef, 0x0d, 0xd8, 0xd3, 0xc0,
	0x8d, 0xd4, 0xb4, 0x92, 0x63, 0x43, 0x87, 0xe3, 0x34, 0xea, 0x29, 0x65, 0x4a, 0x05, 0xb6, 0x2c,
	0x5f, 0xbd, 0x11, 0xa6, 0x66, 0x4e, 0x76, 0xf5, 0xd2, 0x4e, 0x81, 0x2d, 0xbb, 0xb1, 0x71, 0xf0,
	0xb0, 0xf7, 0x31, 0x17, 0x78, 0xd8, 0x7b, 0x1a, 0xb1, 0xce, 0x33, 0xfd, 0xed, 0x29, 0x08, 0xaf,
	0x57, 0xa8, 0x4b, 0x6b, 0xf6, 0x5d, 0xe2, 0xa3, 0xdf, 0x00, 0xbc, 0x4c, 0xe2, 0xaf, 0x86, 0x69,
	0x5b, 0x16, 0xf1, 0x89, 0x1b, 0xda, 0xd8, 0x79, 0xdc, 0xb6, 0x74, 0x57, 0x67, 0x5b, 0x57, 0xd0,
	0xe5, 0x16, 0x8d, 0x91, 0x6d, 0x97, 0x4f, 0x4c, 0x2a, 0x4f, 0xb5, 0x80, 0xdb, 0xff, 0x40, 0x9d,
	0x65, 0x36, 0x32, 0x3a, 0xc6, 0x1a, 0x42, 0x6d, 0x46, 0x4a, 0xdf, 0x1f, 0x85, 0xcc, 0xb5, 0xc7,
	0x84, 0x34, 0x78, 0xd2, 0x21, 0xfd, 0x2b, 0x80, 0x97, 0xe2, 0x7c, 0x2a, 0xfb, 0x5e, 0x56, 0xc1,
	0xda, 0xea, 0x9a, 0xc5, 0xb2, 0x48, 0x8c, 0xac, 0x6e, 0xd5, 0x4d, 0x1d, 0xe4, 0x75, 0x74, 0x29,
	0x4e, 0xb4, 0xb2, 0x1f, 0x66, 0x75, 0xac, 0xad, 0xba, 0x6d, 0x31, 0xed, 0x78, 0x1b, 0x17, 0x25,
	0xaa, 0x98, 0x9d, 0xb3, 0xdd, 0xa2, 0x2c, 0x70, 0x6c, 0x66, 0xbc, 0xad, 0x4f, 0x01, 0x4c, 0x25,
	0xee, 0x40, 0xdd, 0xc8, 0xe7, 0x75, 0x76, 0x30, 0x87, 0x52, 0x89, 0xb0, 0x53, 0x81, 0x12, 0xed,
	0x91, 0x9a, 0x85, 0xde, 0x7f, 0x55, 0xb3, 0x70, 0x0f, 0x8e, 0xc8, 0xd0, 0xf8, 0x5b, 0x5a, 0x78,
	0xe9, 0x7b, 0xd9, 0xc2, 0x0b, 0x31, 0xd1, 0xc2, 0xdf, 0x81, 0xfd, 0x65, 0xda, 0xe4, 0xc5, 0x3e,
	0xa1, 0x69, 0x7f, 0x56, 0x47, 0x17, 0xa2, 0xfe, 0x4d, 0xda, 0xe4, 0x05, 0xbe, 0x70, 0xa6, 0x4c,
	0x9b, 0xec, 0x83, 0xe2, 0xb1, 0xe2, 0xcc, 0x3f, 0xf8, 0x58, 0xf1, 0x03, 0x80, 0xcb, 0x6d, 0x51,
	0xdb, 0x20, 0x0e, 0xad, 0xd8, 0xe1, 0xfe, 0x23, 0xb6, 0xdd, 0xb7, 0x75, 0x98, 0xfe, 0x83, 0x96,
	0xdb, 0x02, 0xb8, 0x24, 0x15, 0x3b, 0x5b, 0xef, 0xc5, 0x38, 0x96, 0xe5, 0x94, 0x8e, 0xee, 0xfb,
	0x01, 0x80, 0x2b, 0xd2, 0x72, 0x35, 0xdc, 0x4c, 0x4e, 0x1f, 0x03, 0x27, 0xfa, 0x46, 0x25, 0xed,
	0x99, 0xc3, 0xcd, 0xe4, 0xac, 0xb1, 0x28, 0xc0, 0x72, 0xb8, 0xa9, 0xce, 0x16, 0x9f, 0x03, 0x38,
	0x17, 0x56, 0x89, 0x5f, 0xa3, 0xec, 0x32, 0x69, 0x60, 0xf3, 0x4e, 0x3d, 0x68, 0xbb, 0x31, 0xa9,
	0x3b, 0xf7, 0x97, 0x75, 0x90, 0xe7, 0xd1, 0xdc, 0x4e, 0x4b, 0x28, 0x13, 0x09, 0xc5, 0xa0, 0xa9,
	0x16, 0x44, 0xf4, 0x53, 0x4c, 0xd8, 0xad, 0x05, 0x1a, 0x7c, 0x92, 0x2d, 0xd0, 0x47, 0x00, 0x4e,
	0x1f, 0xf5, 0x35, 0xe7, 0x52, 0x77, 0xe0, 0x39, 0x1d, 0xae, 0x14, 0x9a, 0x3e, 0xea, 0x5d, 0x8e,
	0x35, 0xd1, 0x91, 0x64, 0xd9, 0xa0, 0xf6, 0x5d, 0xa7, 0x94, 0x29, 0xa5, 0x7f, 0x3f, 0x05, 0xfb,
	0xa2, 0x5e, 0x89, 0x1b, 0x5d, 0xf4, 0x74, 0x71, 0x3f, 0x27, 0xaf, 0xf8, 0xe0, 0x44, 0x8d, 0x2e,
	0x7a, 0xb8, 0xb8, 0x7f, 0x93, 0x37, 0xfd, 0xa9, 0x48, 0x5e, 0x8e, 0xcb, 0xfb, 0xfe, 0xc7, 0x00,
	0x4e, 0x77, 0x82, 0x75, 0x7d, 0x48, 0xd7, 0x35, 0x7a, 0x27, 0x97, 0x30, 0xfa, 0xe4, 0x61, 0x2c,
	0x61, 0xf5, 0x67, 0x74, 0xac, 0xde, 0x8f, 0x84, 0xb5, 0xd3, 0x0f, 0xfa, 0x60, 0xcf, 0x16, 0x76,
	0xd1, 0x3b, 0x70, 0x84, 0xba, 0x06, 0xb5, 0xac, 0x63, 0x6c, 0xad, 0x9b, 0x82, 0xf3, 0xae, 0x91,
	0xb7, 0xac, 0xd8, 0xc4, 0x43, 0xd4, 0xcd, 0x5b, 0x96, 0xb4, 0xec, 0xfb, 0x00, 0x22, 0x0b, 0xbb,
	0x46, 0xe0, 0x11, 0x62, 0x1e, 0x77, 0xe7, 0x79, 0x41, 0x87, 0x60, 0x12, 0xa1, 0x2d, 0xec, 0x1a,
	0x45, 0x2e, 0x10, 0x9f, 0xfc, 0x31, 0x0b, 0xbb, 0x7c, 0x28, 0x3e, 0xf1, 0xef, 0x02, 0x38, 0xce,
	0x48, 0x7c, 0x12, 0x90, 0xf0, 0x98, 0xff, 0x41, 0xe8, 0x3e, 0x13, 0x31, 0x90, 0x02, 0x5f, 0x3f,
	0x6e, 0x2d, 0x2d, 0xec, 0xf2, 0x91, 0x4e, 0x83, 0xd0, 0x06, 0xf1, 0x1d, 0x8a, 0x4d, 0x03, 0x3b,
	0xd8, 0xaf, 0x25, 0xdc, 0x4f, 0xfe, 0x8a, 0x41, 0xf2, 0x52, 0x20, 0xc3, 0x04, 0xb8, 0x41, 0xe4,
	0x10, 0x1f, 0x41, 0x35, 0x38, 0xd0, 0xb0, 0xa4, 0xbe, 0xfa, 0xfe, 0xf1, 0x9c, 0x8e, 0xfe, 0x20,
	0x1a, 0x28, 0x6d, 0x65, 0x85, 0x6c, 0x7f, 0xc3, 0x12, 0x72, 0x1e, 0x84, 0x3c, 0x10, 0xa2, 0xd7,
	0x05, 0xf5, 0xbd, 0x23, 0xa3, 0xa3, 0x37, 0x84, 0x20, 0x0f, 0x80, 0xe8, 0x4d, 0x61, 0x80, 0x39,
	0x9e, 0x7f, 0xd4, 0xce, 0x5a, 0x5b, 0xd8, 0x2d, 0xf7, 0xf1, 0x7f, 0x15, 0x5e, 0xfd, 0x33, 0x00,
	0x00, 0xff, 0xff, 0x25, 0x11, 0xee, 0x4d, 0x62, 0x1c, 0x00, 0x00,
}

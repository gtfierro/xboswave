syntax = "proto3";

//This is designed to be included by the main xbos proto file and includes the
//definitions for the XBOS IoT devices
//
//Maintainer: Gabe Fierro
//Version 1.0
package xbospb;

import "nullabletypes.proto";
import "weather_station.proto";
import "google/protobuf/descriptor.proto";

extend google.protobuf.MessageOptions {
    URI brick_equip_class = 10000;
}
extend google.protobuf.FieldOptions {
    URI brick_point_class = 50000;
}

message URI {
    string namespace = 1;
    string value = 2;
}

message Triple {
    URI subject = 1;
    URI predicate = 2;
    URI object = 3;
}

message Error {
    string msg = 1;
}

message XBOSIoTDeviceState {
    // current time at device/service
    //unit:ns
    uint64 time = 1;
    // unique identifier for this request; used to line up with device state requests
    int64 requestid = 2;
    // any error that occured since the last device report. If requestid above is non-zero,
    // then this error corresponds to the request with the given requestid
    Error error = 3;

    // XBOS IoT devices
    Thermostat thermostat = 4;
    Meter meter = 5;
    Light light = 6;
    EVSE evse = 7;
    WeatherStation weather_station = 8;
    WeatherStationPrediction weather_station_prediction = 9;
}


message XBOSIoTDeviceActuation {
    // current time at device/service
    //unit:ns
    uint64 time = 1;
    // unique identifier for this request; used to line up with device state responses
    int64 requestid = 2;

    // XBOS IoT devices
    Thermostat thermostat = 3;
    Meter meter = 4;
    Light light = 5;
    EVSE evse = 6;
}

message XBOSIoTContext {
    // current time at device/service
    //unit:ns
    uint64 time = 1;
    // any triples this device wants to add about itself
    // these triples will be assumed to be generated by the entity
    // who has created/signed this message
    repeated Triple context = 2;
}

// Thermostat
message Thermostat {
    option (brick_equip_class).namespace = 'brick';
    option (brick_equip_class).value = 'Thermostat';

    //Current temperature recorded by thermostat
    //unit:celsius
    Double temperature = 1 [(brick_point_class).namespace='brick', (brick_point_class).value='Temperature_Sensor'] ;
    //unit:% rh
    Double relative_humidity = 2 [(brick_point_class).namespace='brick', (brick_point_class).value='Humidity_Sensor'];
    //If true, then the thermostat is in override mode
    //unit: t/f
    Bool override = 3 [(brick_point_class).namespace='brick', (brick_point_class).value='Override_Command'];
    //If true, the fan is on; else it is off
    //unit: t/f
    Bool fan_state = 4 [(brick_point_class).namespace='brick', (brick_point_class).value='Fan_Status'];
    //Current operating mode of the fan
    //unit: xbos/iot/FanMode
    FanMode fan_mode = 5 [(brick_point_class).namespace='brick', (brick_point_class).value='Fan_Command'];
    //Current operating mode of the HVAC
    //unit: xbos/iot/HVACMode
    HVACMode mode = 6 [(brick_point_class).namespace='brick', (brick_point_class).value='Mode_Command'];
    //Current HVAC state
    //unit: xbos/iot/HVACState
    HVACState state = 7 [(brick_point_class).namespace='brick', (brick_point_class).value='Thermostat_Status'];
    //number of heat stages enabled
    Int32 enabled_heat_stages = 8;
    //number of cool stages enabled
    Int32 enabled_cool_stages = 9;
    //heating setpoint
    //unit: celsius
    Double heating_setpoint = 10 [(brick_point_class).namespace='brick', (brick_point_class).value='Heating_Temperature_Setpoint'];
    //cooling setpoint
    //unit: celsius
    Double cooling_setpoint = 11 [(brick_point_class).namespace='brick', (brick_point_class).value='Cooling_Temperature_Setpoint'];
}

message ThermostatSchedule {
    //Map day of week to daily schedule
    map<string, ThermostatScheduleDay> scheduleMap = 1;
}

message ThermostatScheduleDay {
    //Daily schedule is Multiple Blocks
    repeated ThermostatScheduleBlock blocks = 1;
}

message ThermostatScheduleBlock {
    //heating setpoint
    //unit: celsius
    Double heating_setpoint = 1;
    //cooling setpoint
    //unit: celsius
    Double cooling_setpoint = 2;
    //Current system mode of thermostat
    //unit: xbos/iot/HVACMode
    HVACMode mode = 3;
    //Time when schedule block takes effect
    //format: RRule
    string time = 4;
}

message Meter {
    option (brick_equip_class).namespace = 'brick';
    option (brick_equip_class).value = 'Meter';
    //unit: kW
    Double power = 1 [(brick_point_class).namespace='brick', (brick_point_class).value='Power_Sensor'];
    //unit: V
    Double voltage = 2 [(brick_point_class).namespace='brick', (brick_point_class).value='Voltage_Sensor'];
    //unit: kVA
    Double apparent_power = 3 [(brick_point_class).namespace='brick', (brick_point_class).value='Apparent_Power_Sensor'];
    //unit: KWh
    Double energy = 4 [(brick_point_class).namespace='brick', (brick_point_class).value='Energy_Sensor'];
}

message Light {
    option (brick_equip_class).namespace = 'brick';
    option (brick_equip_class).value = 'Luminaire';
    // True if the light is on
    //unit: on/off
    Bool state = 1 [(brick_point_class).namespace='brick', (brick_point_class).value='Lighting_State'];
    // 100 is maximum brightness
    Int64 brightness = 2 [(brick_point_class).namespace='brick', (brick_point_class).value='Luminance_Command'];
}

message EVSE {
    // maximum allowed current for charging
    //unit: A
    Double current_limit = 1;
    // active charge current
    //unit: A
    Double current = 2;
    // active charge voltage
    //unit: V
    Double voltage = 3;
    // seconds left until car is charged
    //unit: seconds
    Int32 charging_time_left = 4;
    // charge state of the EVSE
    //unit: on/off
    Bool state = 5;
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: weather_station.proto

package xbospb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WeatherStation struct {
	//epoch time
	//unit: seconds
	Time *Int64 `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"` // Deprecated: Do not use.
	//clear-day/clear-night/rain/snow/sleet/wind/fog/cloudy/partly-cloudy-day/partly-cloudy-night
	Icon string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	//the approximate distance to the nearest storm
	//unit: miles
	NearestStormDistance *Double `protobuf:"bytes,3,opt,name=nearestStormDistance,proto3" json:"nearestStormDistance,omitempty"`
	//direction of the nearest storm with true north at 0 and progressing clockwise; if nearestStormDistance=0 then this value will not be defined
	//unit: degrees
	NearestStormBearing *Double `protobuf:"bytes,4,opt,name=nearestStormBearing,proto3" json:"nearestStormBearing,omitempty"`
	//intensity of precipitation occurring at the given time; this value is conditional on probability
	//unit: inches per hour
	PrecipIntensity *Double `protobuf:"bytes,5,opt,name=precipIntensity,proto3" json:"precipIntensity,omitempty"`
	//the standard deviation of the distribution of precipIntensity
	PrecipIntensityError *Double `protobuf:"bytes,6,opt,name=precipIntensityError,proto3" json:"precipIntensityError,omitempty"`
	//the probability of precipitation occurring; 0-1
	PrecipProbability *Double `protobuf:"bytes,7,opt,name=precipProbability,proto3" json:"precipProbability,omitempty"`
	//rain/snow/sleet; if precipIntensity is zero then this property will not be defined; due to the lack of data historical precipType information is usually estimated rather than observed
	PrecipType string `protobuf:"bytes,8,opt,name=precipType,proto3" json:"precipType,omitempty"`
	//air temperature
	//unit: F
	Temperature *Double `protobuf:"bytes,9,opt,name=temperature,proto3" json:"temperature,omitempty"`
	//feels-like temperature
	//unit: F
	ApparentTemperature *Double `protobuf:"bytes,10,opt,name=apparentTemperature,proto3" json:"apparentTemperature,omitempty"`
	//dew point temperature
	//unit: F
	DewPoint *Double `protobuf:"bytes,11,opt,name=dewPoint,proto3" json:"dewPoint,omitempty"`
	//relative humidity; 0-1
	Humidity *Double `protobuf:"bytes,12,opt,name=humidity,proto3" json:"humidity,omitempty"`
	//sea-level air pressure
	//unit: millibars
	Pressure *Double `protobuf:"bytes,13,opt,name=pressure,proto3" json:"pressure,omitempty"`
	//wind speed
	//unit: miles per hour
	WindSpeed *Double `protobuf:"bytes,14,opt,name=windSpeed,proto3" json:"windSpeed,omitempty"`
	//wind gust speed
	//unit: miles per hour
	WindGust *Double `protobuf:"bytes,15,opt,name=windGust,proto3" json:"windGust,omitempty"`
	//the direction that the wind is coming from with true north at 0 and progressing clockwise; if windSpeed=0 then this value will not be defined
	//unit: degree
	WindBearing *Double `protobuf:"bytes,16,opt,name=windBearing,proto3" json:"windBearing,omitempty"`
	//the percentage of sky occluded by clouds; 0-1
	CloudCover *Double `protobuf:"bytes,17,opt,name=cloudCover,proto3" json:"cloudCover,omitempty"`
	//uv index
	//unit: miles
	UvIndex *Double `protobuf:"bytes,18,opt,name=uvIndex,proto3" json:"uvIndex,omitempty"`
	//average visibility capped at 10 miles
	Visibility *Double `protobuf:"bytes,19,opt,name=visibility,proto3" json:"visibility,omitempty"`
	//the columnar density of total atmospheric ozone
	//unit: Dobson
	Ozone                *Double  `protobuf:"bytes,20,opt,name=ozone,proto3" json:"ozone,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WeatherStation) Reset()         { *m = WeatherStation{} }
func (m *WeatherStation) String() string { return proto.CompactTextString(m) }
func (*WeatherStation) ProtoMessage()    {}
func (*WeatherStation) Descriptor() ([]byte, []int) {
	return fileDescriptor_70ac320ce21dbe32, []int{0}
}

func (m *WeatherStation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WeatherStation.Unmarshal(m, b)
}
func (m *WeatherStation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WeatherStation.Marshal(b, m, deterministic)
}
func (m *WeatherStation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeatherStation.Merge(m, src)
}
func (m *WeatherStation) XXX_Size() int {
	return xxx_messageInfo_WeatherStation.Size(m)
}
func (m *WeatherStation) XXX_DiscardUnknown() {
	xxx_messageInfo_WeatherStation.DiscardUnknown(m)
}

var xxx_messageInfo_WeatherStation proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *WeatherStation) GetTime() *Int64 {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *WeatherStation) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *WeatherStation) GetNearestStormDistance() *Double {
	if m != nil {
		return m.NearestStormDistance
	}
	return nil
}

func (m *WeatherStation) GetNearestStormBearing() *Double {
	if m != nil {
		return m.NearestStormBearing
	}
	return nil
}

func (m *WeatherStation) GetPrecipIntensity() *Double {
	if m != nil {
		return m.PrecipIntensity
	}
	return nil
}

func (m *WeatherStation) GetPrecipIntensityError() *Double {
	if m != nil {
		return m.PrecipIntensityError
	}
	return nil
}

func (m *WeatherStation) GetPrecipProbability() *Double {
	if m != nil {
		return m.PrecipProbability
	}
	return nil
}

func (m *WeatherStation) GetPrecipType() string {
	if m != nil {
		return m.PrecipType
	}
	return ""
}

func (m *WeatherStation) GetTemperature() *Double {
	if m != nil {
		return m.Temperature
	}
	return nil
}

func (m *WeatherStation) GetApparentTemperature() *Double {
	if m != nil {
		return m.ApparentTemperature
	}
	return nil
}

func (m *WeatherStation) GetDewPoint() *Double {
	if m != nil {
		return m.DewPoint
	}
	return nil
}

func (m *WeatherStation) GetHumidity() *Double {
	if m != nil {
		return m.Humidity
	}
	return nil
}

func (m *WeatherStation) GetPressure() *Double {
	if m != nil {
		return m.Pressure
	}
	return nil
}

func (m *WeatherStation) GetWindSpeed() *Double {
	if m != nil {
		return m.WindSpeed
	}
	return nil
}

func (m *WeatherStation) GetWindGust() *Double {
	if m != nil {
		return m.WindGust
	}
	return nil
}

func (m *WeatherStation) GetWindBearing() *Double {
	if m != nil {
		return m.WindBearing
	}
	return nil
}

func (m *WeatherStation) GetCloudCover() *Double {
	if m != nil {
		return m.CloudCover
	}
	return nil
}

func (m *WeatherStation) GetUvIndex() *Double {
	if m != nil {
		return m.UvIndex
	}
	return nil
}

func (m *WeatherStation) GetVisibility() *Double {
	if m != nil {
		return m.Visibility
	}
	return nil
}

func (m *WeatherStation) GetOzone() *Double {
	if m != nil {
		return m.Ozone
	}
	return nil
}

type WeatherStationPrediction struct {
	Predictions          []*WeatherStationPrediction_Prediction `protobuf:"bytes,1,rep,name=predictions,proto3" json:"predictions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *WeatherStationPrediction) Reset()         { *m = WeatherStationPrediction{} }
func (m *WeatherStationPrediction) String() string { return proto.CompactTextString(m) }
func (*WeatherStationPrediction) ProtoMessage()    {}
func (*WeatherStationPrediction) Descriptor() ([]byte, []int) {
	return fileDescriptor_70ac320ce21dbe32, []int{1}
}

func (m *WeatherStationPrediction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WeatherStationPrediction.Unmarshal(m, b)
}
func (m *WeatherStationPrediction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WeatherStationPrediction.Marshal(b, m, deterministic)
}
func (m *WeatherStationPrediction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeatherStationPrediction.Merge(m, src)
}
func (m *WeatherStationPrediction) XXX_Size() int {
	return xxx_messageInfo_WeatherStationPrediction.Size(m)
}
func (m *WeatherStationPrediction) XXX_DiscardUnknown() {
	xxx_messageInfo_WeatherStationPrediction.DiscardUnknown(m)
}

var xxx_messageInfo_WeatherStationPrediction proto.InternalMessageInfo

func (m *WeatherStationPrediction) GetPredictions() []*WeatherStationPrediction_Prediction {
	if m != nil {
		return m.Predictions
	}
	return nil
}

type WeatherStationPrediction_Prediction struct {
	PredictionTime       uint64          `protobuf:"varint,1,opt,name=prediction_time,json=predictionTime,proto3" json:"prediction_time,omitempty"`
	Prediction           *WeatherStation `protobuf:"bytes,2,opt,name=prediction,proto3" json:"prediction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *WeatherStationPrediction_Prediction) Reset()         { *m = WeatherStationPrediction_Prediction{} }
func (m *WeatherStationPrediction_Prediction) String() string { return proto.CompactTextString(m) }
func (*WeatherStationPrediction_Prediction) ProtoMessage()    {}
func (*WeatherStationPrediction_Prediction) Descriptor() ([]byte, []int) {
	return fileDescriptor_70ac320ce21dbe32, []int{1, 0}
}

func (m *WeatherStationPrediction_Prediction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WeatherStationPrediction_Prediction.Unmarshal(m, b)
}
func (m *WeatherStationPrediction_Prediction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WeatherStationPrediction_Prediction.Marshal(b, m, deterministic)
}
func (m *WeatherStationPrediction_Prediction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeatherStationPrediction_Prediction.Merge(m, src)
}
func (m *WeatherStationPrediction_Prediction) XXX_Size() int {
	return xxx_messageInfo_WeatherStationPrediction_Prediction.Size(m)
}
func (m *WeatherStationPrediction_Prediction) XXX_DiscardUnknown() {
	xxx_messageInfo_WeatherStationPrediction_Prediction.DiscardUnknown(m)
}

var xxx_messageInfo_WeatherStationPrediction_Prediction proto.InternalMessageInfo

func (m *WeatherStationPrediction_Prediction) GetPredictionTime() uint64 {
	if m != nil {
		return m.PredictionTime
	}
	return 0
}

func (m *WeatherStationPrediction_Prediction) GetPrediction() *WeatherStation {
	if m != nil {
		return m.Prediction
	}
	return nil
}

func init() {
	proto.RegisterType((*WeatherStation)(nil), "xbospb.WeatherStation")
	proto.RegisterType((*WeatherStationPrediction)(nil), "xbospb.WeatherStationPrediction")
	proto.RegisterType((*WeatherStationPrediction_Prediction)(nil), "xbospb.WeatherStationPrediction.Prediction")
}

func init() { proto.RegisterFile("weather_station.proto", fileDescriptor_70ac320ce21dbe32) }

var fileDescriptor_70ac320ce21dbe32 = []byte{
	// 663 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x6e, 0x13, 0x3d,
	0x14, 0xd5, 0xb4, 0xe9, 0x9f, 0xe7, 0x6b, 0xfa, 0xd5, 0x2d, 0xc8, 0x14, 0x51, 0xa2, 0x02, 0x22,
	0xa2, 0x62, 0x02, 0x2d, 0xaa, 0x50, 0xc5, 0x02, 0x42, 0xf9, 0xe9, 0x02, 0x11, 0x4d, 0x82, 0xba,
	0x1c, 0xcd, 0xcf, 0x55, 0x63, 0x31, 0xb1, 0x2d, 0xdb, 0x93, 0xb6, 0x2c, 0x58, 0x14, 0x04, 0x4f,
	0xd4, 0x77, 0xe1, 0x35, 0xfa, 0x06, 0xc8, 0x33, 0x99, 0x64, 0x5a, 0xcc, 0x82, 0xec, 0x7c, 0xef,
	0x3d, 0x3e, 0xf7, 0xf8, 0x7a, 0x7c, 0x06, 0xdd, 0x38, 0x81, 0x50, 0xf7, 0x41, 0x06, 0x4a, 0x87,
	0x9a, 0x72, 0xe6, 0x09, 0xc9, 0x35, 0xc7, 0xf3, 0xa7, 0x11, 0x57, 0x22, 0xda, 0x58, 0x63, 0x59,
	0x9a, 0x86, 0x51, 0x0a, 0xfa, 0x4c, 0x80, 0x2a, 0x8a, 0x1b, 0x6e, 0x24, 0x69, 0xfc, 0xb9, 0x08,
	0xb6, 0xbe, 0xbb, 0xa8, 0x7e, 0x54, 0x70, 0x74, 0x0b, 0x0a, 0xfc, 0x00, 0xd5, 0x34, 0x1d, 0x00,
	0x71, 0x1a, 0x4e, 0xd3, 0xdd, 0x59, 0xf6, 0x0a, 0x2e, 0xef, 0x90, 0xe9, 0xbd, 0x67, 0xed, 0x19,
	0xe2, 0xf8, 0x79, 0x19, 0x63, 0x54, 0xa3, 0x31, 0x67, 0x64, 0xa6, 0xe1, 0x34, 0x97, 0xfc, 0x7c,
	0x8d, 0xdb, 0x68, 0x9d, 0x41, 0x28, 0x41, 0xe9, 0xae, 0xe6, 0x72, 0x70, 0x40, 0x95, 0x0e, 0x59,
	0x0c, 0x64, 0x36, 0xa7, 0xaa, 0x97, 0x54, 0x07, 0x3c, 0x8b, 0x52, 0xf0, 0xad, 0x58, 0xfc, 0x12,
	0xad, 0x55, 0xf3, 0x6d, 0x08, 0x25, 0x65, 0xc7, 0xa4, 0x66, 0xa5, 0xb0, 0x41, 0xf1, 0x73, 0xb4,
	0x22, 0x24, 0xc4, 0x54, 0x1c, 0x32, 0x0d, 0x4c, 0x51, 0x7d, 0x46, 0xe6, 0xac, 0xbb, 0xaf, 0xc3,
	0x8c, 0xfe, 0x6b, 0xa9, 0x37, 0x52, 0x72, 0x49, 0xe6, 0xed, 0xfa, 0x6d, 0x58, 0xfc, 0x02, 0xad,
	0x16, 0xf9, 0x8e, 0xe4, 0x51, 0x18, 0xd1, 0xd4, 0xf4, 0x5f, 0xb0, 0x12, 0xfc, 0x09, 0xc4, 0x9b,
	0x08, 0x15, 0xc9, 0xde, 0x99, 0x00, 0xb2, 0x98, 0xcf, 0xb6, 0x92, 0xc1, 0x3f, 0x1d, 0xe4, 0x6a,
	0x18, 0x08, 0x90, 0xa1, 0xce, 0x24, 0x90, 0x25, 0x1b, 0x71, 0xfb, 0xd3, 0xf9, 0x05, 0x79, 0x8c,
	0xb6, 0xfb, 0x5a, 0x0b, 0xb5, 0xdf, 0x6a, 0xe5, 0x17, 0xae, 0xe2, 0x3e, 0x0c, 0x42, 0x8f, 0xcb,
	0xe3, 0x56, 0xb1, 0x6c, 0x3d, 0xf5, 0x9e, 0x78, 0xbb, 0xad, 0xb6, 0x29, 0xde, 0x3b, 0xbf, 0x20,
	0x0d, 0xbc, 0xf9, 0x31, 0xd3, 0x8a, 0x26, 0x10, 0xbc, 0xa2, 0x32, 0xe8, 0x4d, 0xba, 0x04, 0x5d,
	0x60, 0x8a, 0x4b, 0xbf, 0xda, 0xd9, 0xdc, 0x53, 0x28, 0x44, 0x28, 0x81, 0xe9, 0x0a, 0x94, 0x20,
	0xfb, 0x3d, 0x59, 0xa0, 0xf8, 0x11, 0x5a, 0x4c, 0xe0, 0xa4, 0xc3, 0x29, 0xd3, 0xc4, 0xb5, 0x6e,
	0x1b, 0xd7, 0xf1, 0x37, 0x07, 0x2d, 0xf6, 0xb3, 0x01, 0x4d, 0xcc, 0x34, 0xff, 0xb3, 0x1e, 0xfa,
	0x68, 0x9a, 0x43, 0x6f, 0xe1, 0xc6, 0xe8, 0xf3, 0x0f, 0x7c, 0x48, 0x43, 0x4d, 0x87, 0x10, 0xbc,
	0x1f, 0xf5, 0x29, 0x8f, 0x3d, 0x6e, 0x6c, 0x14, 0x0b, 0x09, 0x4a, 0x99, 0x83, 0x2e, 0xdb, 0x15,
	0x97, 0x75, 0xfc, 0x15, 0x2d, 0x9d, 0x50, 0x96, 0x74, 0x05, 0x40, 0x42, 0xea, 0x56, 0xc5, 0x9d,
	0x69, 0x14, 0xdf, 0xc6, 0xb7, 0x4a, 0xc5, 0x47, 0x94, 0x25, 0x41, 0xde, 0xa0, 0x94, 0x3a, 0x69,
	0x69, 0xb4, 0x9a, 0xe0, 0x5d, 0xa6, 0x34, 0x59, 0xb1, 0x6b, 0x2d, 0xeb, 0xf8, 0x87, 0x83, 0x5c,
	0x13, 0x94, 0x8f, 0xed, 0x7f, 0xab, 0xdc, 0xde, 0x34, 0x72, 0xef, 0xe2, 0x3b, 0x57, 0xe4, 0x1e,
	0x50, 0x09, 0xb1, 0xf1, 0x99, 0xf1, 0x47, 0x55, 0x69, 0x8c, 0x3d, 0x84, 0xe2, 0x94, 0x67, 0xc9,
	0x6b, 0x3e, 0x04, 0x49, 0x56, 0xad, 0xb2, 0x2b, 0x08, 0xdc, 0x44, 0x0b, 0xd9, 0xf0, 0x90, 0x25,
	0x70, 0x4a, 0xb0, 0x15, 0x5c, 0x96, 0x0d, 0xf3, 0x90, 0x2a, 0x3a, 0x7a, 0x8f, 0x6b, 0x76, 0xe6,
	0x09, 0x02, 0xdf, 0x47, 0x73, 0xfc, 0x0b, 0x67, 0x40, 0xd6, 0xad, 0xd0, 0xa2, 0xb8, 0xff, 0xf6,
	0xfc, 0xb2, 0xf6, 0x8f, 0x23, 0xb9, 0xac, 0xad, 0xe2, 0x95, 0x72, 0x24, 0x23, 0xcf, 0xdd, 0xfa,
	0xe5, 0x20, 0x72, 0xd5, 0x86, 0x3b, 0x12, 0x12, 0x9a, 0x0f, 0x0a, 0x7f, 0x40, 0xae, 0x18, 0x47,
	0x8a, 0x38, 0x8d, 0xd9, 0xa6, 0xbb, 0xb3, 0x5d, 0x0a, 0xfa, 0xdb, 0x36, 0x6f, 0xb2, 0xf4, 0xab,
	0xfb, 0x37, 0x06, 0x08, 0x55, 0xc8, 0x1f, 0xe6, 0x66, 0x39, 0x8a, 0x82, 0xb1, 0xf1, 0xd7, 0xfc,
	0xfa, 0x24, 0xdd, 0x33, 0x7e, 0xbf, 0x97, 0x3b, 0xd3, 0x28, 0x93, 0xbb, 0xbe, 0xbb, 0x73, 0xd3,
	0x2e, 0xc2, 0xaf, 0x20, 0xa3, 0xf9, 0xfc, 0x47, 0xb3, 0xfb, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x3b,
	0xf6, 0x1a, 0x78, 0xab, 0x06, 0x00, 0x00,
}

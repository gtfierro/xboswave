// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hamilton.proto

//This is designed to be included by the main xbos proto file and includes the
//definitions for the Hamilton project
//
//Version 1.0

package xbospb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//Data emitted from Hamilton Sensors
//Maintainer: Michael Andersen
type HamiltonData struct {
	Serial               uint32      `protobuf:"varint,1,opt,name=serial,proto3" json:"serial,omitempty"`
	Model                string      `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	Time                 uint64      `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	H3C                  *Hamilton3C `protobuf:"bytes,4,opt,name=h3c,proto3" json:"h3c,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *HamiltonData) Reset()         { *m = HamiltonData{} }
func (m *HamiltonData) String() string { return proto.CompactTextString(m) }
func (*HamiltonData) ProtoMessage()    {}
func (*HamiltonData) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fef90574e50ac5e, []int{0}
}

func (m *HamiltonData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HamiltonData.Unmarshal(m, b)
}
func (m *HamiltonData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HamiltonData.Marshal(b, m, deterministic)
}
func (m *HamiltonData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HamiltonData.Merge(m, src)
}
func (m *HamiltonData) XXX_Size() int {
	return xxx_messageInfo_HamiltonData.Size(m)
}
func (m *HamiltonData) XXX_DiscardUnknown() {
	xxx_messageInfo_HamiltonData.DiscardUnknown(m)
}

var xxx_messageInfo_HamiltonData proto.InternalMessageInfo

func (m *HamiltonData) GetSerial() uint32 {
	if m != nil {
		return m.Serial
	}
	return 0
}

func (m *HamiltonData) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *HamiltonData) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *HamiltonData) GetH3C() *Hamilton3C {
	if m != nil {
		return m.H3C
	}
	return nil
}

//Data specific to a Hamilton 3C/7C sensor
//Maintainer: Michael Andersen
type Hamilton3C struct {
	// unit:seconds
	Uptime     uint64  `protobuf:"varint,1,opt,name=uptime,proto3" json:"uptime,omitempty"`
	Flags      uint32  `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	AccX       float64 `protobuf:"fixed64,3,opt,name=acc_x,json=accX,proto3" json:"acc_x,omitempty"`
	AccY       float64 `protobuf:"fixed64,4,opt,name=acc_y,json=accY,proto3" json:"acc_y,omitempty"`
	AccZ       float64 `protobuf:"fixed64,5,opt,name=acc_z,json=accZ,proto3" json:"acc_z,omitempty"`
	MagX       float64 `protobuf:"fixed64,6,opt,name=mag_x,json=magX,proto3" json:"mag_x,omitempty"`
	MagY       float64 `protobuf:"fixed64,7,opt,name=mag_y,json=magY,proto3" json:"mag_y,omitempty"`
	MagZ       float64 `protobuf:"fixed64,8,opt,name=mag_z,json=magZ,proto3" json:"mag_z,omitempty"`
	TmpDie     float64 `protobuf:"fixed64,9,opt,name=tmp_die,json=tmpDie,proto3" json:"tmp_die,omitempty"`
	TmpVoltage float64 `protobuf:"fixed64,10,opt,name=tmp_voltage,json=tmpVoltage,proto3" json:"tmp_voltage,omitempty"`
	// unit:celsius
	AirTemp float64 `protobuf:"fixed64,11,opt,name=air_temp,json=airTemp,proto3" json:"air_temp,omitempty"`
	// unit:humidity
	AirHum float64 `protobuf:"fixed64,12,opt,name=air_hum,json=airHum,proto3" json:"air_hum,omitempty"`
	// unit:%rh
	AirRh float64 `protobuf:"fixed64,13,opt,name=air_rh,json=airRh,proto3" json:"air_rh,omitempty"`
	// unit:lux
	LightLux float64 `protobuf:"fixed64,14,opt,name=light_lux,json=lightLux,proto3" json:"light_lux,omitempty"`
	// unit:# pushes
	Buttons uint32 `protobuf:"varint,15,opt,name=buttons,proto3" json:"buttons,omitempty"`
	// unit:% occupied
	Occupancy            float64  `protobuf:"fixed64,16,opt,name=occupancy,proto3" json:"occupancy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Hamilton3C) Reset()         { *m = Hamilton3C{} }
func (m *Hamilton3C) String() string { return proto.CompactTextString(m) }
func (*Hamilton3C) ProtoMessage()    {}
func (*Hamilton3C) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fef90574e50ac5e, []int{1}
}

func (m *Hamilton3C) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Hamilton3C.Unmarshal(m, b)
}
func (m *Hamilton3C) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Hamilton3C.Marshal(b, m, deterministic)
}
func (m *Hamilton3C) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hamilton3C.Merge(m, src)
}
func (m *Hamilton3C) XXX_Size() int {
	return xxx_messageInfo_Hamilton3C.Size(m)
}
func (m *Hamilton3C) XXX_DiscardUnknown() {
	xxx_messageInfo_Hamilton3C.DiscardUnknown(m)
}

var xxx_messageInfo_Hamilton3C proto.InternalMessageInfo

func (m *Hamilton3C) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *Hamilton3C) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *Hamilton3C) GetAccX() float64 {
	if m != nil {
		return m.AccX
	}
	return 0
}

func (m *Hamilton3C) GetAccY() float64 {
	if m != nil {
		return m.AccY
	}
	return 0
}

func (m *Hamilton3C) GetAccZ() float64 {
	if m != nil {
		return m.AccZ
	}
	return 0
}

func (m *Hamilton3C) GetMagX() float64 {
	if m != nil {
		return m.MagX
	}
	return 0
}

func (m *Hamilton3C) GetMagY() float64 {
	if m != nil {
		return m.MagY
	}
	return 0
}

func (m *Hamilton3C) GetMagZ() float64 {
	if m != nil {
		return m.MagZ
	}
	return 0
}

func (m *Hamilton3C) GetTmpDie() float64 {
	if m != nil {
		return m.TmpDie
	}
	return 0
}

func (m *Hamilton3C) GetTmpVoltage() float64 {
	if m != nil {
		return m.TmpVoltage
	}
	return 0
}

func (m *Hamilton3C) GetAirTemp() float64 {
	if m != nil {
		return m.AirTemp
	}
	return 0
}

func (m *Hamilton3C) GetAirHum() float64 {
	if m != nil {
		return m.AirHum
	}
	return 0
}

func (m *Hamilton3C) GetAirRh() float64 {
	if m != nil {
		return m.AirRh
	}
	return 0
}

func (m *Hamilton3C) GetLightLux() float64 {
	if m != nil {
		return m.LightLux
	}
	return 0
}

func (m *Hamilton3C) GetButtons() uint32 {
	if m != nil {
		return m.Buttons
	}
	return 0
}

func (m *Hamilton3C) GetOccupancy() float64 {
	if m != nil {
		return m.Occupancy
	}
	return 0
}

//Data specific to a Hamilton 330/370 sensor
//Maintainer: Michael Andersen
type Hamilton330 struct {
	Uptime     uint64  `protobuf:"varint,1,opt,name=uptime,proto3" json:"uptime,omitempty"`
	Flags      uint32  `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	AccX       float64 `protobuf:"fixed64,3,opt,name=acc_x,json=accX,proto3" json:"acc_x,omitempty"`
	AccY       float64 `protobuf:"fixed64,4,opt,name=acc_y,json=accY,proto3" json:"acc_y,omitempty"`
	AccZ       float64 `protobuf:"fixed64,5,opt,name=acc_z,json=accZ,proto3" json:"acc_z,omitempty"`
	MagX       float64 `protobuf:"fixed64,6,opt,name=mag_x,json=magX,proto3" json:"mag_x,omitempty"`
	MagY       float64 `protobuf:"fixed64,7,opt,name=mag_y,json=magY,proto3" json:"mag_y,omitempty"`
	MagZ       float64 `protobuf:"fixed64,8,opt,name=mag_z,json=magZ,proto3" json:"mag_z,omitempty"`
	TmpDie     float64 `protobuf:"fixed64,9,opt,name=tmp_die,json=tmpDie,proto3" json:"tmp_die,omitempty"`
	TmpVoltage float64 `protobuf:"fixed64,10,opt,name=tmp_voltage,json=tmpVoltage,proto3" json:"tmp_voltage,omitempty"`
	// unit:celsius
	AirTemp float64 `protobuf:"fixed64,11,opt,name=air_temp,json=airTemp,proto3" json:"air_temp,omitempty"`
	// unit:humidity
	AirHum float64 `protobuf:"fixed64,12,opt,name=air_hum,json=airHum,proto3" json:"air_hum,omitempty"`
	// unit:%rh
	AirRh float64 `protobuf:"fixed64,13,opt,name=air_rh,json=airRh,proto3" json:"air_rh,omitempty"`
	// unit:lux
	LightLux float64 `protobuf:"fixed64,14,opt,name=light_lux,json=lightLux,proto3" json:"light_lux,omitempty"`
	// unit:# pushes
	Buttons uint32 `protobuf:"varint,15,opt,name=buttons,proto3" json:"buttons,omitempty"`
	// unit:% occupied
	Occupancy            float64  `protobuf:"fixed64,16,opt,name=occupancy,proto3" json:"occupancy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Hamilton330) Reset()         { *m = Hamilton330{} }
func (m *Hamilton330) String() string { return proto.CompactTextString(m) }
func (*Hamilton330) ProtoMessage()    {}
func (*Hamilton330) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fef90574e50ac5e, []int{2}
}

func (m *Hamilton330) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Hamilton330.Unmarshal(m, b)
}
func (m *Hamilton330) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Hamilton330.Marshal(b, m, deterministic)
}
func (m *Hamilton330) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hamilton330.Merge(m, src)
}
func (m *Hamilton330) XXX_Size() int {
	return xxx_messageInfo_Hamilton330.Size(m)
}
func (m *Hamilton330) XXX_DiscardUnknown() {
	xxx_messageInfo_Hamilton330.DiscardUnknown(m)
}

var xxx_messageInfo_Hamilton330 proto.InternalMessageInfo

func (m *Hamilton330) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *Hamilton330) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *Hamilton330) GetAccX() float64 {
	if m != nil {
		return m.AccX
	}
	return 0
}

func (m *Hamilton330) GetAccY() float64 {
	if m != nil {
		return m.AccY
	}
	return 0
}

func (m *Hamilton330) GetAccZ() float64 {
	if m != nil {
		return m.AccZ
	}
	return 0
}

func (m *Hamilton330) GetMagX() float64 {
	if m != nil {
		return m.MagX
	}
	return 0
}

func (m *Hamilton330) GetMagY() float64 {
	if m != nil {
		return m.MagY
	}
	return 0
}

func (m *Hamilton330) GetMagZ() float64 {
	if m != nil {
		return m.MagZ
	}
	return 0
}

func (m *Hamilton330) GetTmpDie() float64 {
	if m != nil {
		return m.TmpDie
	}
	return 0
}

func (m *Hamilton330) GetTmpVoltage() float64 {
	if m != nil {
		return m.TmpVoltage
	}
	return 0
}

func (m *Hamilton330) GetAirTemp() float64 {
	if m != nil {
		return m.AirTemp
	}
	return 0
}

func (m *Hamilton330) GetAirHum() float64 {
	if m != nil {
		return m.AirHum
	}
	return 0
}

func (m *Hamilton330) GetAirRh() float64 {
	if m != nil {
		return m.AirRh
	}
	return 0
}

func (m *Hamilton330) GetLightLux() float64 {
	if m != nil {
		return m.LightLux
	}
	return 0
}

func (m *Hamilton330) GetButtons() uint32 {
	if m != nil {
		return m.Buttons
	}
	return 0
}

func (m *Hamilton330) GetOccupancy() float64 {
	if m != nil {
		return m.Occupancy
	}
	return 0
}

//Published by Hamilton Border routers periodically
type HamiltonBRLinkStats struct {
	BadFrames            uint64   `protobuf:"varint,1,opt,name=BadFrames,proto3" json:"BadFrames,omitempty"`
	LostFrames           uint64   `protobuf:"varint,2,opt,name=LostFrames,proto3" json:"LostFrames,omitempty"`
	DropNotConnected     uint64   `protobuf:"varint,3,opt,name=DropNotConnected,proto3" json:"DropNotConnected,omitempty"`
	SumSerialReceived    uint64   `protobuf:"varint,4,opt,name=SumSerialReceived,proto3" json:"SumSerialReceived,omitempty"`
	SumDomainForwarded   uint64   `protobuf:"varint,5,opt,name=SumDomainForwarded,proto3" json:"SumDomainForwarded,omitempty"`
	SumDropNotConnected  uint64   `protobuf:"varint,6,opt,name=SumDropNotConnected,proto3" json:"SumDropNotConnected,omitempty"`
	SumDomainReceived    uint64   `protobuf:"varint,7,opt,name=SumDomainReceived,proto3" json:"SumDomainReceived,omitempty"`
	SumSerialForwarded   uint64   `protobuf:"varint,8,opt,name=SumSerialForwarded,proto3" json:"SumSerialForwarded,omitempty"`
	PublishOkay          uint64   `protobuf:"varint,9,opt,name=PublishOkay,proto3" json:"PublishOkay,omitempty"`
	PublishError         uint64   `protobuf:"varint,10,opt,name=PublishError,proto3" json:"PublishError,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HamiltonBRLinkStats) Reset()         { *m = HamiltonBRLinkStats{} }
func (m *HamiltonBRLinkStats) String() string { return proto.CompactTextString(m) }
func (*HamiltonBRLinkStats) ProtoMessage()    {}
func (*HamiltonBRLinkStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fef90574e50ac5e, []int{3}
}

func (m *HamiltonBRLinkStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HamiltonBRLinkStats.Unmarshal(m, b)
}
func (m *HamiltonBRLinkStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HamiltonBRLinkStats.Marshal(b, m, deterministic)
}
func (m *HamiltonBRLinkStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HamiltonBRLinkStats.Merge(m, src)
}
func (m *HamiltonBRLinkStats) XXX_Size() int {
	return xxx_messageInfo_HamiltonBRLinkStats.Size(m)
}
func (m *HamiltonBRLinkStats) XXX_DiscardUnknown() {
	xxx_messageInfo_HamiltonBRLinkStats.DiscardUnknown(m)
}

var xxx_messageInfo_HamiltonBRLinkStats proto.InternalMessageInfo

func (m *HamiltonBRLinkStats) GetBadFrames() uint64 {
	if m != nil {
		return m.BadFrames
	}
	return 0
}

func (m *HamiltonBRLinkStats) GetLostFrames() uint64 {
	if m != nil {
		return m.LostFrames
	}
	return 0
}

func (m *HamiltonBRLinkStats) GetDropNotConnected() uint64 {
	if m != nil {
		return m.DropNotConnected
	}
	return 0
}

func (m *HamiltonBRLinkStats) GetSumSerialReceived() uint64 {
	if m != nil {
		return m.SumSerialReceived
	}
	return 0
}

func (m *HamiltonBRLinkStats) GetSumDomainForwarded() uint64 {
	if m != nil {
		return m.SumDomainForwarded
	}
	return 0
}

func (m *HamiltonBRLinkStats) GetSumDropNotConnected() uint64 {
	if m != nil {
		return m.SumDropNotConnected
	}
	return 0
}

func (m *HamiltonBRLinkStats) GetSumDomainReceived() uint64 {
	if m != nil {
		return m.SumDomainReceived
	}
	return 0
}

func (m *HamiltonBRLinkStats) GetSumSerialForwarded() uint64 {
	if m != nil {
		return m.SumSerialForwarded
	}
	return 0
}

func (m *HamiltonBRLinkStats) GetPublishOkay() uint64 {
	if m != nil {
		return m.PublishOkay
	}
	return 0
}

func (m *HamiltonBRLinkStats) GetPublishError() uint64 {
	if m != nil {
		return m.PublishError
	}
	return 0
}

//Published by Hamilton Border routers for each message
type HamiltonBRMessage struct {
	SrcMAC               string   `protobuf:"bytes,1,opt,name=SrcMAC,proto3" json:"SrcMAC,omitempty"`
	SrcIP                string   `protobuf:"bytes,2,opt,name=SrcIP,proto3" json:"SrcIP,omitempty"`
	PopID                string   `protobuf:"bytes,3,opt,name=PopID,proto3" json:"PopID,omitempty"`
	PopTime              int64    `protobuf:"varint,4,opt,name=PopTime,proto3" json:"PopTime,omitempty"`
	BRTime               int64    `protobuf:"varint,5,opt,name=BRTime,proto3" json:"BRTime,omitempty"`
	RSSI                 int32    `protobuf:"varint,6,opt,name=RSSI,proto3" json:"RSSI,omitempty"`
	LQI                  int32    `protobuf:"varint,7,opt,name=LQI,proto3" json:"LQI,omitempty"`
	Payload              []byte   `protobuf:"bytes,8,opt,name=Payload,proto3" json:"Payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HamiltonBRMessage) Reset()         { *m = HamiltonBRMessage{} }
func (m *HamiltonBRMessage) String() string { return proto.CompactTextString(m) }
func (*HamiltonBRMessage) ProtoMessage()    {}
func (*HamiltonBRMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fef90574e50ac5e, []int{4}
}

func (m *HamiltonBRMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HamiltonBRMessage.Unmarshal(m, b)
}
func (m *HamiltonBRMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HamiltonBRMessage.Marshal(b, m, deterministic)
}
func (m *HamiltonBRMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HamiltonBRMessage.Merge(m, src)
}
func (m *HamiltonBRMessage) XXX_Size() int {
	return xxx_messageInfo_HamiltonBRMessage.Size(m)
}
func (m *HamiltonBRMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_HamiltonBRMessage.DiscardUnknown(m)
}

var xxx_messageInfo_HamiltonBRMessage proto.InternalMessageInfo

func (m *HamiltonBRMessage) GetSrcMAC() string {
	if m != nil {
		return m.SrcMAC
	}
	return ""
}

func (m *HamiltonBRMessage) GetSrcIP() string {
	if m != nil {
		return m.SrcIP
	}
	return ""
}

func (m *HamiltonBRMessage) GetPopID() string {
	if m != nil {
		return m.PopID
	}
	return ""
}

func (m *HamiltonBRMessage) GetPopTime() int64 {
	if m != nil {
		return m.PopTime
	}
	return 0
}

func (m *HamiltonBRMessage) GetBRTime() int64 {
	if m != nil {
		return m.BRTime
	}
	return 0
}

func (m *HamiltonBRMessage) GetRSSI() int32 {
	if m != nil {
		return m.RSSI
	}
	return 0
}

func (m *HamiltonBRMessage) GetLQI() int32 {
	if m != nil {
		return m.LQI
	}
	return 0
}

func (m *HamiltonBRMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*HamiltonData)(nil), "xbospb.HamiltonData")
	proto.RegisterType((*Hamilton3C)(nil), "xbospb.Hamilton3C")
	proto.RegisterType((*Hamilton330)(nil), "xbospb.Hamilton330")
	proto.RegisterType((*HamiltonBRLinkStats)(nil), "xbospb.HamiltonBRLinkStats")
	proto.RegisterType((*HamiltonBRMessage)(nil), "xbospb.HamiltonBRMessage")
}

func init() { proto.RegisterFile("hamilton.proto", fileDescriptor_2fef90574e50ac5e) }

var fileDescriptor_2fef90574e50ac5e = []byte{
	// 655 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x95, 0x5f, 0x6e, 0x13, 0x3b,
	0x14, 0xc6, 0x35, 0xcd, 0xe4, 0xdf, 0x49, 0xda, 0xdb, 0xba, 0xf7, 0xf6, 0x1a, 0x81, 0x20, 0x8a,
	0x78, 0x88, 0x10, 0x8a, 0x2a, 0xb2, 0x02, 0xda, 0x50, 0x35, 0x52, 0x0a, 0xc1, 0x53, 0xa1, 0xb6,
	0x2f, 0x91, 0x33, 0x31, 0x89, 0xd5, 0x71, 0x3c, 0xf2, 0x78, 0x4a, 0xd2, 0x65, 0xc0, 0x52, 0x58,
	0x05, 0xbb, 0x42, 0x3e, 0x33, 0x93, 0xf4, 0xdf, 0x02, 0x78, 0xe0, 0xcd, 0xdf, 0xef, 0xd3, 0x9c,
	0x73, 0xe4, 0xcf, 0xf6, 0xc0, 0xce, 0x9c, 0x2b, 0x19, 0x59, 0xbd, 0xe8, 0xc6, 0x46, 0x5b, 0x4d,
	0x2a, 0xcb, 0x89, 0x4e, 0xe2, 0x49, 0xfb, 0x06, 0x9a, 0xa7, 0xb9, 0xd3, 0xe7, 0x96, 0x93, 0x03,
	0xa8, 0x24, 0xc2, 0x48, 0x1e, 0x51, 0xaf, 0xe5, 0x75, 0xb6, 0x59, 0xae, 0xc8, 0xbf, 0x50, 0x56,
	0x7a, 0x2a, 0x22, 0xba, 0xd5, 0xf2, 0x3a, 0x75, 0x96, 0x09, 0x42, 0xc0, 0xb7, 0x52, 0x09, 0x5a,
	0x6a, 0x79, 0x1d, 0x9f, 0xe1, 0x9a, 0xbc, 0x86, 0xd2, 0xbc, 0x17, 0x52, 0xbf, 0xe5, 0x75, 0x1a,
	0xef, 0x48, 0x37, 0xeb, 0xd3, 0x2d, 0x9a, 0xf4, 0x8e, 0x99, 0xb3, 0xdb, 0xdf, 0x4b, 0x00, 0x1b,
	0xe6, 0xda, 0xa6, 0x31, 0x96, 0xf2, 0xb0, 0x54, 0xae, 0x5c, 0xdb, 0xaf, 0x11, 0x9f, 0x25, 0xd8,
	0x76, 0x9b, 0x65, 0x82, 0xec, 0x43, 0x99, 0x87, 0xe1, 0x78, 0x89, 0x7d, 0x3d, 0xe6, 0xf3, 0x30,
	0xbc, 0x28, 0xe0, 0x0a, 0x3b, 0x67, 0xf0, 0xb2, 0x80, 0xb7, 0xb4, 0xbc, 0x86, 0x57, 0x0e, 0x2a,
	0x3e, 0x1b, 0x2f, 0x69, 0x25, 0x83, 0x8a, 0xcf, 0x2e, 0x0a, 0xb8, 0xa2, 0xd5, 0x35, 0xbc, 0x2c,
	0xe0, 0x2d, 0xad, 0xad, 0xe1, 0x15, 0xf9, 0x1f, 0xaa, 0x56, 0xc5, 0xe3, 0xa9, 0x14, 0xb4, 0x8e,
	0xb8, 0x62, 0x55, 0xdc, 0x97, 0x82, 0xbc, 0x82, 0x86, 0x33, 0x6e, 0x74, 0x64, 0xf9, 0x4c, 0x50,
	0x40, 0x13, 0xac, 0x8a, 0xbf, 0x64, 0x84, 0x3c, 0x83, 0x1a, 0x97, 0x66, 0x6c, 0x85, 0x8a, 0x69,
	0x03, 0xdd, 0x2a, 0x97, 0xe6, 0x5c, 0xa8, 0xd8, 0x15, 0x75, 0xd6, 0x3c, 0x55, 0xb4, 0x99, 0x15,
	0xe5, 0xd2, 0x9c, 0xa6, 0x8a, 0xfc, 0x07, 0x6e, 0x35, 0x36, 0x73, 0xba, 0x8d, 0xbc, 0xcc, 0xa5,
	0x61, 0x73, 0xf2, 0x1c, 0xea, 0x91, 0x9c, 0xcd, 0xed, 0x38, 0x4a, 0x97, 0x74, 0x07, 0x9d, 0x1a,
	0x82, 0x61, 0xba, 0x24, 0x14, 0xaa, 0x93, 0xd4, 0x5a, 0xbd, 0x48, 0xe8, 0x3f, 0xb8, 0x6f, 0x85,
	0x24, 0x2f, 0xa0, 0xae, 0xc3, 0x30, 0x8d, 0xf9, 0x22, 0x5c, 0xd1, 0x5d, 0xfc, 0x6c, 0x03, 0xda,
	0x3f, 0x4a, 0xd0, 0x58, 0x87, 0xd2, 0x3b, 0xfc, 0x9b, 0xca, 0x1f, 0x91, 0xca, 0xcf, 0x12, 0xec,
	0x17, 0xa9, 0x1c, 0xb1, 0xa1, 0x5c, 0x5c, 0x07, 0x96, 0x5b, 0xfc, 0xea, 0x88, 0x4f, 0x4f, 0x0c,
	0x57, 0x22, 0xc9, 0x03, 0xda, 0x00, 0xf2, 0x12, 0x60, 0xa8, 0x13, 0x9b, 0xdb, 0x5b, 0x68, 0xdf,
	0x21, 0xe4, 0x0d, 0xec, 0xf6, 0x8d, 0x8e, 0x3f, 0x6a, 0x7b, 0xac, 0x17, 0x0b, 0x11, 0x5a, 0x31,
	0xcd, 0xaf, 0xf1, 0x23, 0x4e, 0xde, 0xc2, 0x5e, 0x90, 0xaa, 0x00, 0x5f, 0x02, 0x26, 0x42, 0x21,
	0x6f, 0xc4, 0x14, 0x03, 0xf5, 0xd9, 0x63, 0x83, 0x74, 0x81, 0x04, 0xa9, 0xea, 0x6b, 0xc5, 0xe5,
	0xe2, 0x44, 0x9b, 0x6f, 0xdc, 0x4c, 0xc5, 0x14, 0xa3, 0xf6, 0xd9, 0x13, 0x0e, 0x39, 0x84, 0x7d,
	0x47, 0x1f, 0x0e, 0x53, 0xc1, 0x0f, 0x9e, 0xb2, 0xf2, 0x79, 0xb2, 0x3a, 0xeb, 0x79, 0xaa, 0xeb,
	0x79, 0xee, 0x1b, 0xf9, 0x3c, 0xd9, 0x90, 0x9b, 0x79, 0x6a, 0xeb, 0x79, 0x1e, 0x38, 0xa4, 0x05,
	0x8d, 0x51, 0x3a, 0x89, 0x64, 0x32, 0xff, 0x74, 0xcd, 0x57, 0x78, 0x9a, 0x7c, 0x76, 0x17, 0x91,
	0x36, 0x34, 0x73, 0xf9, 0xc1, 0x18, 0x6d, 0xf0, 0x4c, 0xf9, 0xec, 0x1e, 0x6b, 0xff, 0xf2, 0x60,
	0x6f, 0x93, 0xda, 0x99, 0x48, 0x12, 0x77, 0xd6, 0x0e, 0xa0, 0x12, 0x98, 0xf0, 0xec, 0xfd, 0x31,
	0x06, 0x56, 0x67, 0xb9, 0x72, 0x37, 0x2a, 0x30, 0xe1, 0x60, 0x54, 0x3c, 0xaf, 0x28, 0x1c, 0x1d,
	0xe9, 0x78, 0xd0, 0xc7, 0x60, 0xea, 0x2c, 0x13, 0xee, 0x1c, 0x8d, 0x74, 0x7c, 0xee, 0xae, 0xa5,
	0xcb, 0xa0, 0xc4, 0x0a, 0xe9, 0xaa, 0x1f, 0x31, 0x34, 0xca, 0x68, 0xe4, 0xca, 0x3d, 0xd3, 0x2c,
	0x08, 0x06, 0xb8, 0xa5, 0x65, 0x86, 0x6b, 0xb2, 0x0b, 0xa5, 0xe1, 0xe7, 0x01, 0xee, 0x5a, 0x99,
	0xb9, 0x25, 0xd6, 0xe5, 0xab, 0x48, 0xf3, 0x6c, 0x73, 0x9a, 0xac, 0x90, 0x93, 0x0a, 0xfe, 0x33,
	0x7a, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x40, 0xe5, 0xc3, 0x45, 0x06, 0x00, 0x00,
}

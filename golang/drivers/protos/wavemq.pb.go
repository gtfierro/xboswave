// Code generated by protoc-gen-go. DO NOT EDIT.
// source: wavemq.proto

package mqpb

/*
Version 1.0
*/

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ConnectionStatusParams struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectionStatusParams) Reset()         { *m = ConnectionStatusParams{} }
func (m *ConnectionStatusParams) String() string { return proto.CompactTextString(m) }
func (*ConnectionStatusParams) ProtoMessage()    {}
func (*ConnectionStatusParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_wavemq_00154a589965fd11, []int{0}
}
func (m *ConnectionStatusParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectionStatusParams.Unmarshal(m, b)
}
func (m *ConnectionStatusParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectionStatusParams.Marshal(b, m, deterministic)
}
func (dst *ConnectionStatusParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionStatusParams.Merge(dst, src)
}
func (m *ConnectionStatusParams) XXX_Size() int {
	return xxx_messageInfo_ConnectionStatusParams.Size(m)
}
func (m *ConnectionStatusParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionStatusParams.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionStatusParams proto.InternalMessageInfo

type ConnectionStatusResponse struct {
	TotalPeers           int32    `protobuf:"varint,1,opt,name=totalPeers,proto3" json:"totalPeers,omitempty"`
	ConnectedPeers       int32    `protobuf:"varint,2,opt,name=connectedPeers,proto3" json:"connectedPeers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectionStatusResponse) Reset()         { *m = ConnectionStatusResponse{} }
func (m *ConnectionStatusResponse) String() string { return proto.CompactTextString(m) }
func (*ConnectionStatusResponse) ProtoMessage()    {}
func (*ConnectionStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_wavemq_00154a589965fd11, []int{1}
}
func (m *ConnectionStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectionStatusResponse.Unmarshal(m, b)
}
func (m *ConnectionStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectionStatusResponse.Marshal(b, m, deterministic)
}
func (dst *ConnectionStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionStatusResponse.Merge(dst, src)
}
func (m *ConnectionStatusResponse) XXX_Size() int {
	return xxx_messageInfo_ConnectionStatusResponse.Size(m)
}
func (m *ConnectionStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionStatusResponse proto.InternalMessageInfo

func (m *ConnectionStatusResponse) GetTotalPeers() int32 {
	if m != nil {
		return m.TotalPeers
	}
	return 0
}

func (m *ConnectionStatusResponse) GetConnectedPeers() int32 {
	if m != nil {
		return m.ConnectedPeers
	}
	return 0
}

type QueryParams struct {
	Perspective *Perspective `protobuf:"bytes,1,opt,name=perspective,proto3" json:"perspective,omitempty"`
	Namespace   []byte       `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Uri         string       `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	// If specified, this proof will be used instead of building one
	CustomProofDER       []byte   `protobuf:"bytes,4,opt,name=customProofDER,proto3" json:"customProofDER,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryParams) Reset()         { *m = QueryParams{} }
func (m *QueryParams) String() string { return proto.CompactTextString(m) }
func (*QueryParams) ProtoMessage()    {}
func (*QueryParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_wavemq_00154a589965fd11, []int{2}
}
func (m *QueryParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryParams.Unmarshal(m, b)
}
func (m *QueryParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryParams.Marshal(b, m, deterministic)
}
func (dst *QueryParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParams.Merge(dst, src)
}
func (m *QueryParams) XXX_Size() int {
	return xxx_messageInfo_QueryParams.Size(m)
}
func (m *QueryParams) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParams.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParams proto.InternalMessageInfo

func (m *QueryParams) GetPerspective() *Perspective {
	if m != nil {
		return m.Perspective
	}
	return nil
}

func (m *QueryParams) GetNamespace() []byte {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *QueryParams) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *QueryParams) GetCustomProofDER() []byte {
	if m != nil {
		return m.CustomProofDER
	}
	return nil
}

type QueryMessage struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Message              *Message `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryMessage) Reset()         { *m = QueryMessage{} }
func (m *QueryMessage) String() string { return proto.CompactTextString(m) }
func (*QueryMessage) ProtoMessage()    {}
func (*QueryMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_wavemq_00154a589965fd11, []int{3}
}
func (m *QueryMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryMessage.Unmarshal(m, b)
}
func (m *QueryMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryMessage.Marshal(b, m, deterministic)
}
func (dst *QueryMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMessage.Merge(dst, src)
}
func (m *QueryMessage) XXX_Size() int {
	return xxx_messageInfo_QueryMessage.Size(m)
}
func (m *QueryMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMessage.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMessage proto.InternalMessageInfo

func (m *QueryMessage) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *QueryMessage) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

type PeerQueryParams struct {
	SourceEntity         []byte   `protobuf:"bytes,1,opt,name=sourceEntity,proto3" json:"sourceEntity,omitempty"`
	Namespace            []byte   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Uri                  string   `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	Signature            []byte   `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	ProofDER             []byte   `protobuf:"bytes,5,opt,name=proofDER,proto3" json:"proofDER,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerQueryParams) Reset()         { *m = PeerQueryParams{} }
func (m *PeerQueryParams) String() string { return proto.CompactTextString(m) }
func (*PeerQueryParams) ProtoMessage()    {}
func (*PeerQueryParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_wavemq_00154a589965fd11, []int{4}
}
func (m *PeerQueryParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerQueryParams.Unmarshal(m, b)
}
func (m *PeerQueryParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerQueryParams.Marshal(b, m, deterministic)
}
func (dst *PeerQueryParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerQueryParams.Merge(dst, src)
}
func (m *PeerQueryParams) XXX_Size() int {
	return xxx_messageInfo_PeerQueryParams.Size(m)
}
func (m *PeerQueryParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerQueryParams.DiscardUnknown(m)
}

var xxx_messageInfo_PeerQueryParams proto.InternalMessageInfo

func (m *PeerQueryParams) GetSourceEntity() []byte {
	if m != nil {
		return m.SourceEntity
	}
	return nil
}

func (m *PeerQueryParams) GetNamespace() []byte {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *PeerQueryParams) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *PeerQueryParams) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PeerQueryParams) GetProofDER() []byte {
	if m != nil {
		return m.ProofDER
	}
	return nil
}

type PeerUnsubscribeParams struct {
	SourceEntity         []byte   `protobuf:"bytes,1,opt,name=sourceEntity,proto3" json:"sourceEntity,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerUnsubscribeParams) Reset()         { *m = PeerUnsubscribeParams{} }
func (m *PeerUnsubscribeParams) String() string { return proto.CompactTextString(m) }
func (*PeerUnsubscribeParams) ProtoMessage()    {}
func (*PeerUnsubscribeParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_wavemq_00154a589965fd11, []int{5}
}
func (m *PeerUnsubscribeParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerUnsubscribeParams.Unmarshal(m, b)
}
func (m *PeerUnsubscribeParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerUnsubscribeParams.Marshal(b, m, deterministic)
}
func (dst *PeerUnsubscribeParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerUnsubscribeParams.Merge(dst, src)
}
func (m *PeerUnsubscribeParams) XXX_Size() int {
	return xxx_messageInfo_PeerUnsubscribeParams.Size(m)
}
func (m *PeerUnsubscribeParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerUnsubscribeParams.DiscardUnknown(m)
}

var xxx_messageInfo_PeerUnsubscribeParams proto.InternalMessageInfo

func (m *PeerUnsubscribeParams) GetSourceEntity() []byte {
	if m != nil {
		return m.SourceEntity
	}
	return nil
}

func (m *PeerUnsubscribeParams) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type PeerUnsubscribeResponse struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerUnsubscribeResponse) Reset()         { *m = PeerUnsubscribeResponse{} }
func (m *PeerUnsubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*PeerUnsubscribeResponse) ProtoMessage()    {}
func (*PeerUnsubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_wavemq_00154a589965fd11, []int{6}
}
func (m *PeerUnsubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerUnsubscribeResponse.Unmarshal(m, b)
}
func (m *PeerUnsubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerUnsubscribeResponse.Marshal(b, m, deterministic)
}
func (dst *PeerUnsubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerUnsubscribeResponse.Merge(dst, src)
}
func (m *PeerUnsubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_PeerUnsubscribeResponse.Size(m)
}
func (m *PeerUnsubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerUnsubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PeerUnsubscribeResponse proto.InternalMessageInfo

func (m *PeerUnsubscribeResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type PeerPublishParams struct {
	Msg                  *Message `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerPublishParams) Reset()         { *m = PeerPublishParams{} }
func (m *PeerPublishParams) String() string { return proto.CompactTextString(m) }
func (*PeerPublishParams) ProtoMessage()    {}
func (*PeerPublishParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_wavemq_00154a589965fd11, []int{7}
}
func (m *PeerPublishParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerPublishParams.Unmarshal(m, b)
}
func (m *PeerPublishParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerPublishParams.Marshal(b, m, deterministic)
}
func (dst *PeerPublishParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerPublishParams.Merge(dst, src)
}
func (m *PeerPublishParams) XXX_Size() int {
	return xxx_messageInfo_PeerPublishParams.Size(m)
}
func (m *PeerPublishParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerPublishParams.DiscardUnknown(m)
}

var xxx_messageInfo_PeerPublishParams proto.InternalMessageInfo

func (m *PeerPublishParams) GetMsg() *Message {
	if m != nil {
		return m.Msg
	}
	return nil
}

type PeerPublishResponse struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerPublishResponse) Reset()         { *m = PeerPublishResponse{} }
func (m *PeerPublishResponse) String() string { return proto.CompactTextString(m) }
func (*PeerPublishResponse) ProtoMessage()    {}
func (*PeerPublishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_wavemq_00154a589965fd11, []int{8}
}
func (m *PeerPublishResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerPublishResponse.Unmarshal(m, b)
}
func (m *PeerPublishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerPublishResponse.Marshal(b, m, deterministic)
}
func (dst *PeerPublishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerPublishResponse.Merge(dst, src)
}
func (m *PeerPublishResponse) XXX_Size() int {
	return xxx_messageInfo_PeerPublishResponse.Size(m)
}
func (m *PeerPublishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerPublishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PeerPublishResponse proto.InternalMessageInfo

func (m *PeerPublishResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type PeerSubscriptionTBS struct {
	SourceEntity []byte `protobuf:"bytes,1,opt,name=sourceEntity,proto3" json:"sourceEntity,omitempty"`
	Namespace    []byte `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Uri          string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	Id           string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// This is the router that formed the subscription message
	RouterID string `protobuf:"bytes,5,opt,name=routerID,proto3" json:"routerID,omitempty"`
	// How long should this queue last if not actively drained
	// Should be > 1 minute to prevent disconnect of live queues
	// This is in seconds
	Expiry               int64    `protobuf:"varint,6,opt,name=expiry,proto3" json:"expiry,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerSubscriptionTBS) Reset()         { *m = PeerSubscriptionTBS{} }
func (m *PeerSubscriptionTBS) String() string { return proto.CompactTextString(m) }
func (*PeerSubscriptionTBS) ProtoMessage()    {}
func (*PeerSubscriptionTBS) Descriptor() ([]byte, []int) {
	return fileDescriptor_wavemq_00154a589965fd11, []int{9}
}
func (m *PeerSubscriptionTBS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerSubscriptionTBS.Unmarshal(m, b)
}
func (m *PeerSubscriptionTBS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerSubscriptionTBS.Marshal(b, m, deterministic)
}
func (dst *PeerSubscriptionTBS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerSubscriptionTBS.Merge(dst, src)
}
func (m *PeerSubscriptionTBS) XXX_Size() int {
	return xxx_messageInfo_PeerSubscriptionTBS.Size(m)
}
func (m *PeerSubscriptionTBS) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerSubscriptionTBS.DiscardUnknown(m)
}

var xxx_messageInfo_PeerSubscriptionTBS proto.InternalMessageInfo

func (m *PeerSubscriptionTBS) GetSourceEntity() []byte {
	if m != nil {
		return m.SourceEntity
	}
	return nil
}

func (m *PeerSubscriptionTBS) GetNamespace() []byte {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *PeerSubscriptionTBS) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *PeerSubscriptionTBS) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PeerSubscriptionTBS) GetRouterID() string {
	if m != nil {
		return m.RouterID
	}
	return ""
}

func (m *PeerSubscriptionTBS) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

type PeerSubscribeParams struct {
	Tbs       *PeerSubscriptionTBS `protobuf:"bytes,1,opt,name=tbs,proto3" json:"tbs,omitempty"`
	Signature []byte               `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	ProofDER  []byte               `protobuf:"bytes,3,opt,name=proofDER,proto3" json:"proofDER,omitempty"`
	// This is a unix timestamp in nanoseconds that this subscription should
	// expire at
	AbsoluteExpiry       int64    `protobuf:"varint,4,opt,name=absoluteExpiry,proto3" json:"absoluteExpiry,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerSubscribeParams) Reset()         { *m = PeerSubscribeParams{} }
func (m *PeerSubscribeParams) String() string { return proto.CompactTextString(m) }
func (*PeerSubscribeParams) ProtoMessage()    {}
func (*PeerSubscribeParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_wavemq_00154a589965fd11, []int{10}
}
func (m *PeerSubscribeParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerSubscribeParams.Unmarshal(m, b)
}
func (m *PeerSubscribeParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerSubscribeParams.Marshal(b, m, deterministic)
}
func (dst *PeerSubscribeParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerSubscribeParams.Merge(dst, src)
}
func (m *PeerSubscribeParams) XXX_Size() int {
	return xxx_messageInfo_PeerSubscribeParams.Size(m)
}
func (m *PeerSubscribeParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerSubscribeParams.DiscardUnknown(m)
}

var xxx_messageInfo_PeerSubscribeParams proto.InternalMessageInfo

func (m *PeerSubscribeParams) GetTbs() *PeerSubscriptionTBS {
	if m != nil {
		return m.Tbs
	}
	return nil
}

func (m *PeerSubscribeParams) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PeerSubscribeParams) GetProofDER() []byte {
	if m != nil {
		return m.ProofDER
	}
	return nil
}

func (m *PeerSubscribeParams) GetAbsoluteExpiry() int64 {
	if m != nil {
		return m.AbsoluteExpiry
	}
	return 0
}

type PublishParams struct {
	Perspective *Perspective     `protobuf:"bytes,1,opt,name=perspective,proto3" json:"perspective,omitempty"`
	Namespace   []byte           `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Uri         string           `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	Content     []*PayloadObject `protobuf:"bytes,4,rep,name=content,proto3" json:"content,omitempty"`
	// If specified, the message will be encrypted
	EncryptionPartition [][]byte `protobuf:"bytes,5,rep,name=encryptionPartition,proto3" json:"encryptionPartition,omitempty"`
	// Should this message be persisted
	Persist bool `protobuf:"varint,6,opt,name=persist,proto3" json:"persist,omitempty"`
	// If specified, this proof will be used instead of building one
	CustomProofDER       []byte   `protobuf:"bytes,7,opt,name=customProofDER,proto3" json:"customProofDER,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishParams) Reset()         { *m = PublishParams{} }
func (m *PublishParams) String() string { return proto.CompactTextString(m) }
func (*PublishParams) ProtoMessage()    {}
func (*PublishParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_wavemq_00154a589965fd11, []int{11}
}
func (m *PublishParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishParams.Unmarshal(m, b)
}
func (m *PublishParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishParams.Marshal(b, m, deterministic)
}
func (dst *PublishParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishParams.Merge(dst, src)
}
func (m *PublishParams) XXX_Size() int {
	return xxx_messageInfo_PublishParams.Size(m)
}
func (m *PublishParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishParams.DiscardUnknown(m)
}

var xxx_messageInfo_PublishParams proto.InternalMessageInfo

func (m *PublishParams) GetPerspective() *Perspective {
	if m != nil {
		return m.Perspective
	}
	return nil
}

func (m *PublishParams) GetNamespace() []byte {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *PublishParams) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *PublishParams) GetContent() []*PayloadObject {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *PublishParams) GetEncryptionPartition() [][]byte {
	if m != nil {
		return m.EncryptionPartition
	}
	return nil
}

func (m *PublishParams) GetPersist() bool {
	if m != nil {
		return m.Persist
	}
	return false
}

func (m *PublishParams) GetCustomProofDER() []byte {
	if m != nil {
		return m.CustomProofDER
	}
	return nil
}

type PublishResponse struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishResponse) Reset()         { *m = PublishResponse{} }
func (m *PublishResponse) String() string { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()    {}
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_wavemq_00154a589965fd11, []int{12}
}
func (m *PublishResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishResponse.Unmarshal(m, b)
}
func (m *PublishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishResponse.Marshal(b, m, deterministic)
}
func (dst *PublishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishResponse.Merge(dst, src)
}
func (m *PublishResponse) XXX_Size() int {
	return xxx_messageInfo_PublishResponse.Size(m)
}
func (m *PublishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishResponse proto.InternalMessageInfo

func (m *PublishResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type MessageTBS struct {
	SourceEntity   []byte           `protobuf:"bytes,1,opt,name=sourceEntity,proto3" json:"sourceEntity,omitempty"`
	SourceLocation *LocationURI     `protobuf:"bytes,2,opt,name=sourceLocation,proto3" json:"sourceLocation,omitempty"`
	Namespace      []byte           `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Uri            string           `protobuf:"bytes,4,opt,name=uri,proto3" json:"uri,omitempty"`
	Payload        []*PayloadObject `protobuf:"bytes,5,rep,name=payload,proto3" json:"payload,omitempty"`
	// The ID of the router/agent that formed this message
	OriginRouter         string   `protobuf:"bytes,6,opt,name=originRouter,proto3" json:"originRouter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageTBS) Reset()         { *m = MessageTBS{} }
func (m *MessageTBS) String() string { return proto.CompactTextString(m) }
func (*MessageTBS) ProtoMessage()    {}
func (*MessageTBS) Descriptor() ([]byte, []int) {
	return fileDescriptor_wavemq_00154a589965fd11, []int{13}
}
func (m *MessageTBS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageTBS.Unmarshal(m, b)
}
func (m *MessageTBS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageTBS.Marshal(b, m, deterministic)
}
func (dst *MessageTBS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageTBS.Merge(dst, src)
}
func (m *MessageTBS) XXX_Size() int {
	return xxx_messageInfo_MessageTBS.Size(m)
}
func (m *MessageTBS) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageTBS.DiscardUnknown(m)
}

var xxx_messageInfo_MessageTBS proto.InternalMessageInfo

func (m *MessageTBS) GetSourceEntity() []byte {
	if m != nil {
		return m.SourceEntity
	}
	return nil
}

func (m *MessageTBS) GetSourceLocation() *LocationURI {
	if m != nil {
		return m.SourceLocation
	}
	return nil
}

func (m *MessageTBS) GetNamespace() []byte {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *MessageTBS) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *MessageTBS) GetPayload() []*PayloadObject {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *MessageTBS) GetOriginRouter() string {
	if m != nil {
		return m.OriginRouter
	}
	return ""
}

type Message struct {
	Proof                *Proof      `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
	ProofDER             []byte      `protobuf:"bytes,2,opt,name=proofDER,proto3" json:"proofDER,omitempty"`
	Tbs                  *MessageTBS `protobuf:"bytes,3,opt,name=tbs,proto3" json:"tbs,omitempty"`
	Signature            []byte      `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	EncryptionPartition  [][]byte    `protobuf:"bytes,5,rep,name=encryptionPartition,proto3" json:"encryptionPartition,omitempty"`
	Timestamps           []int64     `protobuf:"varint,6,rep,packed,name=timestamps,proto3" json:"timestamps,omitempty"`
	Drops                []int64     `protobuf:"varint,7,rep,packed,name=drops,proto3" json:"drops,omitempty"`
	Persist              bool        `protobuf:"varint,8,opt,name=persist,proto3" json:"persist,omitempty"`
	ProofHash            []byte      `protobuf:"bytes,9,opt,name=proofHash,proto3" json:"proofHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_wavemq_00154a589965fd11, []int{14}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetProof() *Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *Message) GetProofDER() []byte {
	if m != nil {
		return m.ProofDER
	}
	return nil
}

func (m *Message) GetTbs() *MessageTBS {
	if m != nil {
		return m.Tbs
	}
	return nil
}

func (m *Message) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Message) GetEncryptionPartition() [][]byte {
	if m != nil {
		return m.EncryptionPartition
	}
	return nil
}

func (m *Message) GetTimestamps() []int64 {
	if m != nil {
		return m.Timestamps
	}
	return nil
}

func (m *Message) GetDrops() []int64 {
	if m != nil {
		return m.Drops
	}
	return nil
}

func (m *Message) GetPersist() bool {
	if m != nil {
		return m.Persist
	}
	return false
}

func (m *Message) GetProofHash() []byte {
	if m != nil {
		return m.ProofHash
	}
	return nil
}

type PayloadObject struct {
	Schema               string   `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Content              []byte   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayloadObject) Reset()         { *m = PayloadObject{} }
func (m *PayloadObject) String() string { return proto.CompactTextString(m) }
func (*PayloadObject) ProtoMessage()    {}
func (*PayloadObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_wavemq_00154a589965fd11, []int{15}
}
func (m *PayloadObject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PayloadObject.Unmarshal(m, b)
}
func (m *PayloadObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PayloadObject.Marshal(b, m, deterministic)
}
func (dst *PayloadObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayloadObject.Merge(dst, src)
}
func (m *PayloadObject) XXX_Size() int {
	return xxx_messageInfo_PayloadObject.Size(m)
}
func (m *PayloadObject) XXX_DiscardUnknown() {
	xxx_messageInfo_PayloadObject.DiscardUnknown(m)
}

var xxx_messageInfo_PayloadObject proto.InternalMessageInfo

func (m *PayloadObject) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *PayloadObject) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type SubscribeParams struct {
	Perspective *Perspective `protobuf:"bytes,1,opt,name=perspective,proto3" json:"perspective,omitempty"`
	Namespace   []byte       `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Uri         string       `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	// If specified, this proof will be used instead of building one for the
	// subscribe
	CustomProofDER []byte `protobuf:"bytes,4,opt,name=customProofDER,proto3" json:"customProofDER,omitempty"`
	// The unique identifier for the subscription. This enables you to resume
	// a previous subscription
	Identifier string `protobuf:"bytes,5,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// How long should this queue last if not actively drained
	// Should be > 1 minute to prevent disconnect of live queues
	// This is in seconds
	Expiry int64 `protobuf:"varint,6,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// What absolute time (nanoseconds UTC) should this subscription expire at
	// This is not normally used
	AbsoluteExpiry       int64    `protobuf:"varint,7,opt,name=absoluteExpiry,proto3" json:"absoluteExpiry,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeParams) Reset()         { *m = SubscribeParams{} }
func (m *SubscribeParams) String() string { return proto.CompactTextString(m) }
func (*SubscribeParams) ProtoMessage()    {}
func (*SubscribeParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_wavemq_00154a589965fd11, []int{16}
}
func (m *SubscribeParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeParams.Unmarshal(m, b)
}
func (m *SubscribeParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeParams.Marshal(b, m, deterministic)
}
func (dst *SubscribeParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeParams.Merge(dst, src)
}
func (m *SubscribeParams) XXX_Size() int {
	return xxx_messageInfo_SubscribeParams.Size(m)
}
func (m *SubscribeParams) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeParams.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeParams proto.InternalMessageInfo

func (m *SubscribeParams) GetPerspective() *Perspective {
	if m != nil {
		return m.Perspective
	}
	return nil
}

func (m *SubscribeParams) GetNamespace() []byte {
	if m != nil {
		return m.Namespace
	}
	return nil
}

func (m *SubscribeParams) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *SubscribeParams) GetCustomProofDER() []byte {
	if m != nil {
		return m.CustomProofDER
	}
	return nil
}

func (m *SubscribeParams) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *SubscribeParams) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *SubscribeParams) GetAbsoluteExpiry() int64 {
	if m != nil {
		return m.AbsoluteExpiry
	}
	return 0
}

type SubscriptionMessage struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Message              *Message `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscriptionMessage) Reset()         { *m = SubscriptionMessage{} }
func (m *SubscriptionMessage) String() string { return proto.CompactTextString(m) }
func (*SubscriptionMessage) ProtoMessage()    {}
func (*SubscriptionMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_wavemq_00154a589965fd11, []int{17}
}
func (m *SubscriptionMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriptionMessage.Unmarshal(m, b)
}
func (m *SubscriptionMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriptionMessage.Marshal(b, m, deterministic)
}
func (dst *SubscriptionMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionMessage.Merge(dst, src)
}
func (m *SubscriptionMessage) XXX_Size() int {
	return xxx_messageInfo_SubscriptionMessage.Size(m)
}
func (m *SubscriptionMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionMessage proto.InternalMessageInfo

func (m *SubscriptionMessage) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *SubscriptionMessage) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*ConnectionStatusParams)(nil), "mqpb.ConnectionStatusParams")
	proto.RegisterType((*ConnectionStatusResponse)(nil), "mqpb.ConnectionStatusResponse")
	proto.RegisterType((*QueryParams)(nil), "mqpb.QueryParams")
	proto.RegisterType((*QueryMessage)(nil), "mqpb.QueryMessage")
	proto.RegisterType((*PeerQueryParams)(nil), "mqpb.PeerQueryParams")
	proto.RegisterType((*PeerUnsubscribeParams)(nil), "mqpb.PeerUnsubscribeParams")
	proto.RegisterType((*PeerUnsubscribeResponse)(nil), "mqpb.PeerUnsubscribeResponse")
	proto.RegisterType((*PeerPublishParams)(nil), "mqpb.PeerPublishParams")
	proto.RegisterType((*PeerPublishResponse)(nil), "mqpb.PeerPublishResponse")
	proto.RegisterType((*PeerSubscriptionTBS)(nil), "mqpb.PeerSubscriptionTBS")
	proto.RegisterType((*PeerSubscribeParams)(nil), "mqpb.PeerSubscribeParams")
	proto.RegisterType((*PublishParams)(nil), "mqpb.PublishParams")
	proto.RegisterType((*PublishResponse)(nil), "mqpb.PublishResponse")
	proto.RegisterType((*MessageTBS)(nil), "mqpb.MessageTBS")
	proto.RegisterType((*Message)(nil), "mqpb.Message")
	proto.RegisterType((*PayloadObject)(nil), "mqpb.PayloadObject")
	proto.RegisterType((*SubscribeParams)(nil), "mqpb.SubscribeParams")
	proto.RegisterType((*SubscriptionMessage)(nil), "mqpb.SubscriptionMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WAVEMQClient is the client API for WAVEMQ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WAVEMQClient interface {
	Publish(ctx context.Context, in *PublishParams, opts ...grpc.CallOption) (*PublishResponse, error)
	Subscribe(ctx context.Context, in *SubscribeParams, opts ...grpc.CallOption) (WAVEMQ_SubscribeClient, error)
	Query(ctx context.Context, in *QueryParams, opts ...grpc.CallOption) (WAVEMQ_QueryClient, error)
	ConnectionStatus(ctx context.Context, in *ConnectionStatusParams, opts ...grpc.CallOption) (*ConnectionStatusResponse, error)
}

type wAVEMQClient struct {
	cc *grpc.ClientConn
}

func NewWAVEMQClient(cc *grpc.ClientConn) WAVEMQClient {
	return &wAVEMQClient{cc}
}

func (c *wAVEMQClient) Publish(ctx context.Context, in *PublishParams, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/mqpb.WAVEMQ/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wAVEMQClient) Subscribe(ctx context.Context, in *SubscribeParams, opts ...grpc.CallOption) (WAVEMQ_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WAVEMQ_serviceDesc.Streams[0], "/mqpb.WAVEMQ/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &wAVEMQSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WAVEMQ_SubscribeClient interface {
	Recv() (*SubscriptionMessage, error)
	grpc.ClientStream
}

type wAVEMQSubscribeClient struct {
	grpc.ClientStream
}

func (x *wAVEMQSubscribeClient) Recv() (*SubscriptionMessage, error) {
	m := new(SubscriptionMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wAVEMQClient) Query(ctx context.Context, in *QueryParams, opts ...grpc.CallOption) (WAVEMQ_QueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WAVEMQ_serviceDesc.Streams[1], "/mqpb.WAVEMQ/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &wAVEMQQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WAVEMQ_QueryClient interface {
	Recv() (*QueryMessage, error)
	grpc.ClientStream
}

type wAVEMQQueryClient struct {
	grpc.ClientStream
}

func (x *wAVEMQQueryClient) Recv() (*QueryMessage, error) {
	m := new(QueryMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wAVEMQClient) ConnectionStatus(ctx context.Context, in *ConnectionStatusParams, opts ...grpc.CallOption) (*ConnectionStatusResponse, error) {
	out := new(ConnectionStatusResponse)
	err := c.cc.Invoke(ctx, "/mqpb.WAVEMQ/ConnectionStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WAVEMQServer is the server API for WAVEMQ service.
type WAVEMQServer interface {
	Publish(context.Context, *PublishParams) (*PublishResponse, error)
	Subscribe(*SubscribeParams, WAVEMQ_SubscribeServer) error
	Query(*QueryParams, WAVEMQ_QueryServer) error
	ConnectionStatus(context.Context, *ConnectionStatusParams) (*ConnectionStatusResponse, error)
}

func RegisterWAVEMQServer(s *grpc.Server, srv WAVEMQServer) {
	s.RegisterService(&_WAVEMQ_serviceDesc, srv)
}

func _WAVEMQ_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WAVEMQServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mqpb.WAVEMQ/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WAVEMQServer).Publish(ctx, req.(*PublishParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _WAVEMQ_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WAVEMQServer).Subscribe(m, &wAVEMQSubscribeServer{stream})
}

type WAVEMQ_SubscribeServer interface {
	Send(*SubscriptionMessage) error
	grpc.ServerStream
}

type wAVEMQSubscribeServer struct {
	grpc.ServerStream
}

func (x *wAVEMQSubscribeServer) Send(m *SubscriptionMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _WAVEMQ_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WAVEMQServer).Query(m, &wAVEMQQueryServer{stream})
}

type WAVEMQ_QueryServer interface {
	Send(*QueryMessage) error
	grpc.ServerStream
}

type wAVEMQQueryServer struct {
	grpc.ServerStream
}

func (x *wAVEMQQueryServer) Send(m *QueryMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _WAVEMQ_ConnectionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionStatusParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WAVEMQServer).ConnectionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mqpb.WAVEMQ/ConnectionStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WAVEMQServer).ConnectionStatus(ctx, req.(*ConnectionStatusParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _WAVEMQ_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mqpb.WAVEMQ",
	HandlerType: (*WAVEMQServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _WAVEMQ_Publish_Handler,
		},
		{
			MethodName: "ConnectionStatus",
			Handler:    _WAVEMQ_ConnectionStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _WAVEMQ_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Query",
			Handler:       _WAVEMQ_Query_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "wavemq.proto",
}

// WAVEMQPeeringClient is the client API for WAVEMQPeering service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WAVEMQPeeringClient interface {
	PeerPublish(ctx context.Context, in *PeerPublishParams, opts ...grpc.CallOption) (*PeerPublishResponse, error)
	PeerSubscribe(ctx context.Context, in *PeerSubscribeParams, opts ...grpc.CallOption) (WAVEMQPeering_PeerSubscribeClient, error)
	PeerUnsubscribe(ctx context.Context, in *PeerUnsubscribeParams, opts ...grpc.CallOption) (*PeerUnsubscribeResponse, error)
	PeerQueryRequest(ctx context.Context, in *PeerQueryParams, opts ...grpc.CallOption) (WAVEMQPeering_PeerQueryRequestClient, error)
}

type wAVEMQPeeringClient struct {
	cc *grpc.ClientConn
}

func NewWAVEMQPeeringClient(cc *grpc.ClientConn) WAVEMQPeeringClient {
	return &wAVEMQPeeringClient{cc}
}

func (c *wAVEMQPeeringClient) PeerPublish(ctx context.Context, in *PeerPublishParams, opts ...grpc.CallOption) (*PeerPublishResponse, error) {
	out := new(PeerPublishResponse)
	err := c.cc.Invoke(ctx, "/mqpb.WAVEMQPeering/PeerPublish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wAVEMQPeeringClient) PeerSubscribe(ctx context.Context, in *PeerSubscribeParams, opts ...grpc.CallOption) (WAVEMQPeering_PeerSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WAVEMQPeering_serviceDesc.Streams[0], "/mqpb.WAVEMQPeering/PeerSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &wAVEMQPeeringPeerSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WAVEMQPeering_PeerSubscribeClient interface {
	Recv() (*SubscriptionMessage, error)
	grpc.ClientStream
}

type wAVEMQPeeringPeerSubscribeClient struct {
	grpc.ClientStream
}

func (x *wAVEMQPeeringPeerSubscribeClient) Recv() (*SubscriptionMessage, error) {
	m := new(SubscriptionMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wAVEMQPeeringClient) PeerUnsubscribe(ctx context.Context, in *PeerUnsubscribeParams, opts ...grpc.CallOption) (*PeerUnsubscribeResponse, error) {
	out := new(PeerUnsubscribeResponse)
	err := c.cc.Invoke(ctx, "/mqpb.WAVEMQPeering/PeerUnsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wAVEMQPeeringClient) PeerQueryRequest(ctx context.Context, in *PeerQueryParams, opts ...grpc.CallOption) (WAVEMQPeering_PeerQueryRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WAVEMQPeering_serviceDesc.Streams[1], "/mqpb.WAVEMQPeering/PeerQueryRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &wAVEMQPeeringPeerQueryRequestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WAVEMQPeering_PeerQueryRequestClient interface {
	Recv() (*QueryMessage, error)
	grpc.ClientStream
}

type wAVEMQPeeringPeerQueryRequestClient struct {
	grpc.ClientStream
}

func (x *wAVEMQPeeringPeerQueryRequestClient) Recv() (*QueryMessage, error) {
	m := new(QueryMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WAVEMQPeeringServer is the server API for WAVEMQPeering service.
type WAVEMQPeeringServer interface {
	PeerPublish(context.Context, *PeerPublishParams) (*PeerPublishResponse, error)
	PeerSubscribe(*PeerSubscribeParams, WAVEMQPeering_PeerSubscribeServer) error
	PeerUnsubscribe(context.Context, *PeerUnsubscribeParams) (*PeerUnsubscribeResponse, error)
	PeerQueryRequest(*PeerQueryParams, WAVEMQPeering_PeerQueryRequestServer) error
}

func RegisterWAVEMQPeeringServer(s *grpc.Server, srv WAVEMQPeeringServer) {
	s.RegisterService(&_WAVEMQPeering_serviceDesc, srv)
}

func _WAVEMQPeering_PeerPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerPublishParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WAVEMQPeeringServer).PeerPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mqpb.WAVEMQPeering/PeerPublish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WAVEMQPeeringServer).PeerPublish(ctx, req.(*PeerPublishParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _WAVEMQPeering_PeerSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PeerSubscribeParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WAVEMQPeeringServer).PeerSubscribe(m, &wAVEMQPeeringPeerSubscribeServer{stream})
}

type WAVEMQPeering_PeerSubscribeServer interface {
	Send(*SubscriptionMessage) error
	grpc.ServerStream
}

type wAVEMQPeeringPeerSubscribeServer struct {
	grpc.ServerStream
}

func (x *wAVEMQPeeringPeerSubscribeServer) Send(m *SubscriptionMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _WAVEMQPeering_PeerUnsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerUnsubscribeParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WAVEMQPeeringServer).PeerUnsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mqpb.WAVEMQPeering/PeerUnsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WAVEMQPeeringServer).PeerUnsubscribe(ctx, req.(*PeerUnsubscribeParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _WAVEMQPeering_PeerQueryRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PeerQueryParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WAVEMQPeeringServer).PeerQueryRequest(m, &wAVEMQPeeringPeerQueryRequestServer{stream})
}

type WAVEMQPeering_PeerQueryRequestServer interface {
	Send(*QueryMessage) error
	grpc.ServerStream
}

type wAVEMQPeeringPeerQueryRequestServer struct {
	grpc.ServerStream
}

func (x *wAVEMQPeeringPeerQueryRequestServer) Send(m *QueryMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _WAVEMQPeering_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mqpb.WAVEMQPeering",
	HandlerType: (*WAVEMQPeeringServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PeerPublish",
			Handler:    _WAVEMQPeering_PeerPublish_Handler,
		},
		{
			MethodName: "PeerUnsubscribe",
			Handler:    _WAVEMQPeering_PeerUnsubscribe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PeerSubscribe",
			Handler:       _WAVEMQPeering_PeerSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PeerQueryRequest",
			Handler:       _WAVEMQPeering_PeerQueryRequest_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "wavemq.proto",
}

func init() { proto.RegisterFile("wavemq.proto", fileDescriptor_wavemq_00154a589965fd11) }

var fileDescriptor_wavemq_00154a589965fd11 = []byte{
	// 960 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x5f, 0x6f, 0xe3, 0x44,
	0x10, 0x97, 0xed, 0xfc, 0xa9, 0x27, 0x49, 0xdb, 0xdb, 0x72, 0x77, 0x6e, 0x28, 0x47, 0xf0, 0x03,
	0x44, 0x42, 0x54, 0x55, 0xee, 0x90, 0x40, 0x42, 0x42, 0x85, 0x8b, 0xe0, 0x04, 0x15, 0xb9, 0x2d,
	0x07, 0x12, 0x6f, 0x1b, 0x67, 0x2f, 0x5d, 0x54, 0x7b, 0xdd, 0xdd, 0xf5, 0x41, 0xde, 0xf9, 0x0e,
	0x48, 0xbc, 0xf0, 0xc2, 0x13, 0x88, 0xaf, 0xc6, 0x47, 0x40, 0x68, 0x77, 0xed, 0xc4, 0x76, 0x5c,
	0xb8, 0x22, 0x15, 0xf1, 0xe6, 0xfd, 0xcd, 0xac, 0xf7, 0x37, 0xbf, 0x99, 0x9d, 0x1d, 0xe8, 0x7f,
	0x47, 0x5e, 0xd0, 0xf8, 0xea, 0x38, 0x15, 0x5c, 0x71, 0xd4, 0x8a, 0xaf, 0xd2, 0xf9, 0x10, 0x28,
	0x49, 0x99, 0x45, 0xc2, 0x00, 0xee, 0x7d, 0xcc, 0x93, 0x84, 0x46, 0x8a, 0xf1, 0xe4, 0x5c, 0x11,
	0x95, 0xc9, 0x19, 0x11, 0x24, 0x96, 0xe1, 0x1c, 0x82, 0xba, 0x05, 0x53, 0x99, 0xf2, 0x44, 0x52,
	0xf4, 0x00, 0x40, 0x71, 0x45, 0x2e, 0x67, 0x94, 0x0a, 0x19, 0x38, 0x23, 0x67, 0xdc, 0xc6, 0x25,
	0x04, 0xbd, 0x09, 0xbb, 0x91, 0xdd, 0x4b, 0x17, 0xd6, 0xc7, 0x35, 0x3e, 0x35, 0x34, 0xfc, 0xc9,
	0x81, 0xde, 0xd3, 0x8c, 0x8a, 0x95, 0x3d, 0x13, 0x3d, 0x84, 0x5e, 0x4a, 0x85, 0x4c, 0xf5, 0xa1,
	0x2f, 0xa8, 0xf9, 0x71, 0x6f, 0x72, 0xe7, 0x58, 0xb3, 0x3e, 0x9e, 0x6d, 0x0c, 0xb8, 0xec, 0x85,
	0x8e, 0xc0, 0x4f, 0x48, 0x4c, 0x65, 0x4a, 0x22, 0x6a, 0xce, 0xe9, 0xe3, 0x0d, 0x80, 0xf6, 0xc1,
	0xcb, 0x04, 0x0b, 0xbc, 0x91, 0x33, 0xf6, 0xb1, 0xfe, 0x34, 0xe4, 0x32, 0xa9, 0x78, 0x3c, 0x13,
	0x9c, 0x3f, 0x7f, 0x3c, 0xc5, 0x41, 0xcb, 0x6c, 0xaa, 0xa1, 0xe1, 0x37, 0xd0, 0x37, 0xdc, 0xce,
	0xa8, 0x94, 0x64, 0x49, 0xd1, 0x1b, 0xd0, 0xa6, 0x42, 0x70, 0x91, 0xd3, 0xea, 0x59, 0x5a, 0x53,
	0x0d, 0x61, 0x6b, 0x41, 0x6f, 0x41, 0x37, 0xb6, 0xde, 0x86, 0x48, 0x6f, 0x32, 0xb0, 0x4e, 0xf9,
	0x2f, 0x70, 0x61, 0x0d, 0x7f, 0x76, 0x60, 0x4f, 0x4b, 0x50, 0x0e, 0x3e, 0x84, 0xbe, 0xe4, 0x99,
	0x88, 0xe8, 0x34, 0x51, 0x4c, 0xad, 0xcc, 0x31, 0x7d, 0x5c, 0xc1, 0x6e, 0x1c, 0xeb, 0x11, 0xf8,
	0x92, 0x2d, 0x13, 0xa2, 0x32, 0x41, 0xf3, 0x30, 0x37, 0x00, 0x1a, 0xc2, 0x4e, 0x5a, 0x68, 0xd0,
	0x36, 0xc6, 0xf5, 0x3a, 0xfc, 0x0c, 0xee, 0x6a, 0x82, 0xcf, 0x12, 0x99, 0xcd, 0x65, 0x24, 0xd8,
	0x9c, 0xde, 0x80, 0xe6, 0x2e, 0xb8, 0x6c, 0x61, 0xf8, 0xf9, 0xd8, 0x65, 0x8b, 0xf0, 0x03, 0xb8,
	0x5f, 0xfb, 0xd9, 0xba, 0x94, 0xfe, 0x59, 0xd5, 0xf0, 0x11, 0xdc, 0xd1, 0xbb, 0x67, 0xd9, 0xfc,
	0x92, 0xc9, 0x8b, 0x9c, 0xc6, 0xeb, 0xe0, 0xc5, 0x72, 0x99, 0xef, 0xaa, 0xc9, 0xac, 0x2d, 0xe1,
	0x7b, 0x70, 0x50, 0xda, 0x75, 0x93, 0xf3, 0x7e, 0x77, 0xec, 0xd6, 0x73, 0x4b, 0x36, 0xd5, 0x17,
	0xe0, 0xcb, 0x8f, 0xce, 0x6f, 0x25, 0x41, 0x56, 0xa9, 0x56, 0xa1, 0x94, 0x4e, 0x89, 0xe0, 0x99,
	0xa2, 0xe2, 0xc9, 0x63, 0x93, 0x12, 0x1f, 0xaf, 0xd7, 0xe8, 0x1e, 0x74, 0xe8, 0xf7, 0x29, 0x13,
	0xab, 0xa0, 0x33, 0x72, 0xc6, 0x1e, 0xce, 0x57, 0xe1, 0x2f, 0x55, 0xbe, 0xeb, 0x4c, 0xbd, 0x0d,
	0x9e, 0x9a, 0xcb, 0x3c, 0xd0, 0xc3, 0xe2, 0x16, 0x6d, 0xc5, 0x85, 0xb5, 0x57, 0xb5, 0x52, 0xdc,
	0xbf, 0xab, 0x14, 0xaf, 0x5a, 0x29, 0xfa, 0x3e, 0x91, 0xb9, 0xe4, 0x97, 0x99, 0xa2, 0x53, 0x4b,
	0xaf, 0x65, 0xe8, 0xd5, 0xd0, 0xf0, 0x47, 0x17, 0x06, 0xd5, 0x1c, 0xfe, 0x27, 0xd7, 0xfd, 0x1d,
	0xe8, 0x46, 0x3c, 0x51, 0x34, 0x51, 0x41, 0x6b, 0xe4, 0x8d, 0x7b, 0x93, 0x83, 0xfc, 0x00, 0xb2,
	0xba, 0xe4, 0x64, 0xf1, 0xc5, 0xfc, 0x5b, 0x1a, 0x29, 0x5c, 0xf8, 0xa0, 0x13, 0x38, 0xa0, 0x49,
	0x24, 0x56, 0x46, 0x9d, 0x19, 0x11, 0x8a, 0xe9, 0x8f, 0xa0, 0x3d, 0xf2, 0xc6, 0x7d, 0xdc, 0x64,
	0x42, 0x01, 0x74, 0x35, 0x3f, 0x26, 0x95, 0xc9, 0xcb, 0x0e, 0x2e, 0x96, 0x0d, 0x9d, 0xa6, 0xdb,
	0xd8, 0x69, 0x1e, 0xc1, 0xde, 0xbf, 0x28, 0xd3, 0x3f, 0x1c, 0x80, 0xbc, 0xe2, 0x5f, 0xb6, 0x3a,
	0xdf, 0x87, 0x5d, 0xbb, 0xfe, 0x9c, 0x47, 0xc4, 0xc4, 0xe5, 0x96, 0x35, 0x2f, 0xd0, 0x67, 0xf8,
	0x09, 0xae, 0x39, 0x56, 0x65, 0xf7, 0xae, 0x91, 0xbd, 0x55, 0x91, 0x3d, 0xb5, 0x0a, 0x1b, 0xed,
	0xae, 0x93, 0x3d, 0xf7, 0xd1, 0xec, 0xb9, 0x60, 0x4b, 0x96, 0x60, 0x53, 0xed, 0x46, 0x49, 0x1f,
	0x57, 0xb0, 0xf0, 0x57, 0x17, 0xba, 0xa5, 0x66, 0x6c, 0x0a, 0xb0, 0xaa, 0x8f, 0x51, 0x14, 0x5b,
	0x4b, 0xa5, 0x66, 0xdd, 0x5a, 0xcd, 0x86, 0xf6, 0x6a, 0x78, 0x66, 0xf3, 0x7e, 0xa5, 0x7b, 0x34,
	0xdf, 0x88, 0xad, 0xde, 0x79, 0xf3, 0x3a, 0xd1, 0x8f, 0x26, 0x8b, 0xa9, 0x54, 0x24, 0x4e, 0x65,
	0xd0, 0x19, 0x79, 0x63, 0x0f, 0x97, 0x10, 0xf4, 0x0a, 0xb4, 0x17, 0x82, 0xa7, 0x32, 0xe8, 0x1a,
	0x93, 0x5d, 0x94, 0xab, 0x6b, 0xa7, 0x5a, 0x5d, 0x47, 0xe0, 0x9b, 0x78, 0x3e, 0x25, 0xf2, 0x22,
	0xf0, 0x2d, 0xbf, 0x35, 0x10, 0x9e, 0xc2, 0xa0, 0x22, 0xb5, 0xee, 0x1e, 0x32, 0xba, 0xa0, 0x31,
	0x31, 0x92, 0xf9, 0x38, 0x5f, 0xe9, 0x03, 0x8a, 0xfb, 0x61, 0x55, 0x2a, 0x96, 0xe1, 0x9f, 0x0e,
	0xec, 0xd5, 0x7b, 0xca, 0xff, 0xe9, 0x85, 0xd6, 0x8a, 0xb2, 0x05, 0x4d, 0x14, 0x7b, 0xce, 0xa8,
	0xc8, 0xdb, 0x65, 0x09, 0xb9, 0xae, 0x61, 0x36, 0x74, 0xac, 0x6e, 0x63, 0xc7, 0x22, 0x70, 0x50,
	0xee, 0x95, 0xb7, 0x30, 0x08, 0x4c, 0x7e, 0x70, 0xa1, 0xf3, 0xf5, 0xe9, 0x57, 0xd3, 0xb3, 0xa7,
	0xe8, 0x5d, 0xe8, 0xe6, 0x5d, 0x00, 0x15, 0x77, 0xa5, 0xdc, 0x2d, 0x87, 0x77, 0x2b, 0xe0, 0xba,
	0x53, 0x7c, 0x08, 0xfe, 0x3a, 0x49, 0x28, 0xf7, 0xa9, 0x65, 0x6d, 0x78, 0x58, 0x81, 0xcb, 0xc1,
	0x9c, 0x38, 0xe8, 0x04, 0xda, 0x66, 0x0c, 0x41, 0x79, 0x1a, 0x4b, 0x33, 0xc9, 0x10, 0x95, 0xa0,
	0xcd, 0x8e, 0x19, 0xec, 0xd7, 0x47, 0x43, 0x74, 0x64, 0x3d, 0x9b, 0x87, 0xc9, 0xe1, 0x83, 0x66,
	0x6b, 0x11, 0xc4, 0xe4, 0x37, 0x17, 0x06, 0x56, 0x06, 0xfd, 0x40, 0xb1, 0x64, 0x89, 0x4e, 0xa1,
	0x57, 0x7a, 0xbe, 0xd1, 0xfd, 0xcd, 0xf3, 0x55, 0x55, 0xe5, 0x70, 0xcb, 0xb0, 0x56, 0xe6, 0x13,
	0x18, 0x54, 0x9e, 0x45, 0xb4, 0xfd, 0x06, 0xbe, 0x9c, 0x42, 0x67, 0x76, 0x58, 0x2b, 0x8d, 0x2f,
	0xe8, 0xd5, 0xcd, 0xaf, 0xb6, 0x46, 0xa4, 0xe1, 0x6b, 0x8d, 0xc6, 0x52, 0xc6, 0xf6, 0xd7, 0xb3,
	0x1f, 0xa6, 0x57, 0x19, 0x95, 0xaa, 0x48, 0x5c, 0x6d, 0x26, 0x6c, 0xd6, 0x7f, 0xde, 0x31, 0xb3,
	0xfb, 0xc3, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x78, 0xac, 0xbb, 0x2a, 0xdd, 0x0b, 0x00, 0x00,
}
